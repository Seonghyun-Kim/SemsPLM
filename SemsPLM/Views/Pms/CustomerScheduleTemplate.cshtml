@{
    Layout = null;
}
<div style="padding:10px;">
    <table width="100%">
        <tr>
            <td>
                <h2><i class="fas fa-folder-open"></i>고객대일정 템플릿</h2>
            </td>
            <td style="text-align:right;">
                <button id="CustomerScheduleTemplate_EditBtn" class="custom-button"><i class="fas fa-edit"></i> 수정</button>
                <div class="ModifiableEditCustomBox">
                    <button id="CustomerScheduleTemplate_SaveBtn" class="custom-button"><i class="fas fa-save"></i> 저장</button>
                    <button id="CustomerScheduleTemplate_CancelBtn" class="custom-button"><i class="fas fa-window-close"></i> 취소</button>
                </div>
            </td>
        </tr>
    </table>
</div>
<div id="CustomerScheduleTemplate_ParentGrid" style="float:left;margin-right:0.9%;"></div>

<div id="CustomerScheduleTemplate_ChildGrid" style="float:left;"></div>

<script>
    var param = {};
    var Data;
    var mkey; //메인idx
    var subkey; //서브idx
    var rowKey = null;
    var rowDataField = null;
    var TemplateParentAddBtn$;
    var TemplateParentdelBtn$;
    var TemplateParentUpBtn$;
    var TemplateParentDownBtn$;
    var TemplateChildAddBtn$;
    var TemplateChilddelBtn$;
    var TemplateChildUpBtn$;
    var TemplateChildDownBtn$;
    $(function () {

        $('.ModifiableEditCustomBox').attr('hidden', true);

        $('#CustomerScheduleTemplate_EditBtn').on('click', function () {
            $('.ModifiableEditCustomBox').attr('hidden', false);
            $('#CustomerScheduleTemplate_EditBtn').attr('hidden', true);

            TemplateParentAddBtn$.jqxButton({ disabled: false });
            TemplateParentdelBtn$.jqxButton({ disabled: false });
            TemplateParentUpBtn$.jqxButton({ disabled: false });
            TemplateParentDownBtn$.jqxButton({ disabled: false });

            TemplateChildAddBtn$.jqxButton({ disabled: false });
            TemplateChilddelBtn$.jqxButton({ disabled: false });
            TemplateChildUpBtn$.jqxButton({ disabled: false });
            TemplateChildDownBtn$.jqxButton({ disabled: false });

            ScheduleTemplateParentGrd$.jqxGrid('setcolumnproperty', 'Name', 'editable', true);
            ScheduleTemplateChildGrd$.jqxGrid('setcolumnproperty', 'Name', 'editable', true);
        });

        $('#CustomerScheduleTemplate_CancelBtn').on('click', function () {
            PageReload();
        });

        $('#CustomerScheduleTemplate_SaveBtn').on('click', function () {
            ScheduleTemplateChildGrd$.jqxGrid('endcelledit', rowKey, rowDataField, false);
            if (confirm("저장하시겠습니까?")) {
                RequestData('/Pms/updatCustomerScheduleTemplate', { _param: Data }, function (response) {
                    if (response.isError) {
                        alert(response.resultMessage);
                        return;
                    }
                    alert("저장되었습니다.");
                    PageReload();
                });
            }
        });

        var ScheduleTemplateParentsource =
        {
            dataType: "json",
            dataFields: [
                { name: 'OID', type: 'number' },
                { name: 'Name', type: 'string' },
                { name: 'KorNm', type: 'string' },
                { name: 'Ord', type: 'number' },
                { name: 'isMove', type: 'string' },
                { name: 'Cdata', type: 'array' },
                { name: 'isChange', type: 'string' },
                { name: 'isParentMove', type: 'string' },
                { name: 'isDelete', type: 'string' },
            ],
            addrow: function (rowid, rowdata, position, commit) {
                // synchronize with the server - send insert command
                // call commit with parameter true if the synchronization with the server is successful
                //and with parameter false if the synchronization failed.
                Data.push(rowdata);
                ScheduleTemplateParentGrd$.jqxGrid('setcellvalue', rowid, "isChange", "Y");
                commit(true);
            },
            updaterow: function (rowid, rowdata, commit) {
                // synchronize with the server - send update command
                // call commit with parameter true if the synchronization with the server is successful
                // and with parameter false if the synchronization failder.
                if (Data[mkey].Name != rowdata.Name) {
                    rowdata.isChange = "Y";
                }
                if (rowdata.isChange == "Y") {
                    ScheduleTemplateParentGrd$.jqxGrid('setcellvalue', mkey, "isChange", "Y");
                    Data[mkey] = rowdata;

                }
                commit(true);
            },
            deleterow: function (rowid, commit) {
                Data[mkey].isDelete = 'Y';
                ScheduleTemplateParentGrd$.jqxGrid('setcellvalue', mkey, "isChange", null);
                ScheduleTemplateParentGrd$.jqxGrid('setcellvalue', mkey, "isMove", null);
                ScheduleTemplateParentGrd$.jqxGrid('setcellvalue', mkey, "isDelete", "Y");
                commit(true);
            }
        };
        var initialized = false;
        const ScheduleTemplateParentGrd$ = $('#CustomerScheduleTemplate_ParentGrid');
        ScheduleTemplateParentGrd$.jqxGrid(
            {
                width: "49.4%",
                height: 750,
                theme: "kdnc",
                selectionmode: 'checkbox',
                //      source: dataAdapter,
                sortable: true,
                ready: function () {
                    initialized = true;

                },
                columns: [
                    { text: 'OID', datafield: 'OID', type: 'number', align: 'center', hidden: true },
                    { text: 'isChange', datafield: 'isChange', type: 'string', align: 'center', hidden: true },
                    { text: 'isMove', datafield: 'isMove', type: 'string', align: 'center', hidden: true },
                    { text: 'isDelete', datafield: 'isDelete', type: 'string', align: 'center', hidden: true },
                    { text: 'isParentMove', datafield: 'isParentMove', type: 'string', align: 'center', hidden: true },
                    {

                        text: 'NO', width: "10%", cellsalign: 'center', columntype: 'number', align: 'center', editable: false,
                        cellsrenderer: function (row, column, value) {
                            return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:1.9;'>" + (value + 1) + "</div>";
                        }
                    },
                    {
                        text: '템플릿명', datafield: 'Name', type: 'string', width: '86.8%', editable: false,
                        cellsrenderer: function (row, column, value) {
                            var item = ScheduleTemplateParentGrd$.jqxGrid('getrowdata', row);
                            if (item.isChange == "Y") {
                                return "<div class='modifyTag' style='text-align:center;vertical-align:middle;'></div><p style='line-height:32px;text-indent:4px;'>" + value + "</p>";
                            } else {
                                return "<div style='width:100%;height:100%;text-indent:4px;vertical-align:middle;line-height:32px;'>" + value + "</div>";
                            }
                        }
                    },
                    // { text: '생성일', datafield: 'CreateDt', type: 'date', align: 'center', },
                    // { text: '생성자', datafield: 'CreateUsNm', type: 'string', align: 'center', },
                ],
                editable: true,
                editmode: 'dblclick',
                showToolbar: true,
                toolbarHeight: 45,

                renderToolbar: function (statusbar) {

                    var container$ = $('<div class="lGridComponent"></div>');
                    TemplateParentAddBtn$ = $('<button class="custom-button"><i class="fas fa-plus-square"></i> 추가</button>').jqxButton();
                    TemplateParentdelBtn$ = $('<button class="custom-button"><i class="fas fa-window-close"></i> 삭제</button>').jqxButton();
                    TemplateParentUpBtn$ = $('<button class="custom-button"><i class="fas fa-caret-square-up"></i> 위로</button>').jqxButton();
                    TemplateParentDownBtn$ = $('<button class="custom-button"><i class="fas fa-caret-square-down"></i> 아래로</button>').jqxButton();
                    TemplateParentAddBtn$.jqxButton({ disabled: true });
                    TemplateParentdelBtn$.jqxButton({ disabled: true });
                    TemplateParentUpBtn$.jqxButton({ disabled: true });
                    TemplateParentDownBtn$.jqxButton({ disabled: true });
                    TemplateParentDownBtn$
                    container$.append(TemplateParentAddBtn$);
                    container$.append(TemplateParentdelBtn$);
                    container$.append(TemplateParentUpBtn$);
                    container$.append(TemplateParentDownBtn$);
                    statusbar.append(container$);
                    //행 추가
                    TemplateParentAddBtn$.on('click', function (e) {
                        ScheduleTemplateParentGrd$.jqxGrid('addrow', null, {
                            'Name': null,
                            'KorNm': null,
                            'Ord': null,
                            'isMove': null,
                            'Cdata': [],
                            'isChange': "Y",
                            'isParentMove': null

                        });
                    });
                    TemplateParentdelBtn$.on('click', function (e) {
                        var rowindex = ScheduleTemplateParentGrd$.jqxGrid('selectedrowindexes');
                        rowindex.sort();
                        if (rowindex == null || rowindex == undefined || rowindex.length <= 0) {
                            alert('삭제할 행을 선택하여 주세요');
                        } else {
                            if (confirm('삭제하시겠습니까?')) {
                                for (var i = rowindex.length - 1; i >= 0; i--) {
                                    var id = ScheduleTemplateParentGrd$.jqxGrid('getrowid', rowindex[i]);
                                    ScheduleTemplateParentGrd$.jqxGrid('deleterow', id);
                                }
                            }
                            ScheduleTemplateParentGrd$.jqxGrid('clearselection');

                        }
                    });
                    TemplateParentUpBtn$.on('click', function (e) {
                        //var datarowIdx = ScheduleTemplateChildGrd$.jqxGrid('getselectedrowindex');

                        var row = ScheduleTemplateParentGrd$.jqxGrid('getrowdata', mkey);
                        var idx = row.boundindex - 1;
                        if (row.uid == 0) {
                            return;
                        }
                        const parentDataSource = ScheduleTemplateParentGrd$.jqxGrid("source").loadedData;
                        fMoveGridRecusive(parentDataSource, row.OID, 'UP');
                        ScheduleTemplateParentGrd$.jqxGrid('updatebounddata');
                        //ScheduleTemplateParentGrd$.jqxGrid('setcellvalue', mkey, "isMove", "Y");
                        Data[0].isParentMove = "Y";
                        ScheduleTemplateParentGrd$.jqxGrid('clearselection');
                        if (idx >= 0) {
                            ScheduleTemplateParentGrd$.jqxGrid('selectrow', idx);
                        } else {
                            ScheduleTemplateParentGrd$.jqxGrid('selectrow', 0);
                        }
                    });
                    TemplateParentDownBtn$.on('click', function (e) {
                        //  var datarowIdx = ScheduleTemplateChildGrd$.jqxGrid('getselectedrowindexes');
                        var row = ScheduleTemplateParentGrd$.jqxGrid('getrowdata', mkey);
                        var idx = row.boundindex + 1;
                        var maxLength = ScheduleTemplateParentGrd$.jqxGrid('getrows').length;
                        if (row.uid == maxLength) {
                            return;
                        }
                        const parentDataSource = ScheduleTemplateParentGrd$.jqxGrid("source").loadedData;
                        var midx = parentDataSource.length - 1;
                        fMoveGridRecusive(parentDataSource, row.OID, 'DOWN');
                        ScheduleTemplateParentGrd$.jqxGrid('updatebounddata');
                        // ScheduleTemplateParentGrd$.jqxGrid('setcellvalue', mkey, "isMove", "Y");
                        Data[0].isParentMove = "Y";
                        ScheduleTemplateParentGrd$.jqxGrid('clearselection');
                        if (idx <= midx) {
                            ScheduleTemplateParentGrd$.jqxGrid('selectrow', idx);
                        } else {
                            ScheduleTemplateParentGrd$.jqxGrid('selectrow', midx);
                        }
                    });
                }
            });
        getScheduleTemplateList(ScheduleTemplateParentsource, ScheduleTemplateParentGrd$, param);

        var ScheduleTemplateChildsource =
        {
            dataType: "json",
            dataFields: [
                { name: 'OID', type: 'number' },
                { name: 'Name', type: 'string' },
                { name: 'KorNm', type: 'string' },
                { name: 'Ord', type: 'number' },
                { name: 'IsUse', type: 'string' },
                { name: 'isChange', type: 'string' },
            ],
            addrow: function (rowid, rowdata, position, commit) {
                // synchronize with the server - send insert command
                // call commit with parameter true if the synchronization with the server is successful
                //and with parameter false if the synchronization failed.
                Data[mkey].Cdata.push(rowdata);
                ScheduleTemplateParentGrd$.jqxGrid('setcellvalue', mkey, "isChange", "Y");
                commit(true);
            },
            updaterow: function (rowid, rowdata, commit) {
                // synchronize with the server - send update command
                // call commit with parameter true if the synchronization with the server is successful
                // and with parameter false if the synchronization failder.
                if (Data[mkey].Cdata[rowid].Name != rowdata.Name) {
                    rowdata.isChange = "Y";
                }
                if (rowdata.isChange == "Y") {
                    ScheduleTemplateParentGrd$.jqxGrid('setcellvalue', mkey, "isChange", "Y");
                    Data[mkey].Cdata[rowid] = rowdata;

                }
                commit(true);
            },
            deleterow: function (rowid, commit) {
                Data[mkey].Cdata.splice(rowid, 1);
                ScheduleTemplateParentGrd$.jqxGrid('setcellvalue', mkey, "isChange", "Y");
                commit(true);
            }
        };

        var initialized = false;
        const ScheduleTemplateChildGrd$ = $('#CustomerScheduleTemplate_ChildGrid');
        ScheduleTemplateChildGrd$.jqxGrid('refreshdata');
        ScheduleTemplateChildGrd$.jqxGrid(
            {
                width: "49.4%",
                height: 750,
                theme: "kdnc",
                //      source: dataAdapter,
                selectionmode: 'checkbox',
                sortable: true,
                ready: function () {
                    initialized = true;

                },
                columns: [
                    { text: 'OID', datafield: 'OID', type: 'number', cellsalign: 'center', hidden: true },
                    {

                        text: 'NO', width: "10%", cellsalign: 'center', columntype: 'number', align: 'center', editable: false,
                        cellsrenderer: function (row, column, value) {
                            return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:1.9;'>" + (value + 1) + "</div>";
                        }
                    },
                    {
                        text: '고객일정명', width: '86.8%', datafield: 'Name', type: 'string', editable: false,
                        cellsrenderer: function (row, column, value) {
                            var item = ScheduleTemplateChildGrd$.jqxGrid('getrowdata', row);
                            if (item.isChange == "Y") {
                                return "<div class='modifyTag' style='text-align:center;vertical-align:middle;'></div><p style='line-height:32px;text-indent:4px;'>" + value + "</p>";
                            } else {
                                return "<div style='width:100%;height:100%;text-indent:4px;vertical-align:middle;line-height:32px;'>" + value + "</div>";
                            }
                        },
                    },

                    // { text: '생성일', datafield: 'CreateDt', type: 'date', align: 'center', },
                    // { text: '생성자', datafield: 'CreateUsNm', type: 'string', align: 'center', },
                ],
                editable: true,
                editmode: 'dblclick',
                showToolbar: true,
                toolbarHeight: 45,
                renderToolbar: function (statusbar) {

                    var container$ = $('<div class="lGridComponent"></div>');
                    TemplateChildAddBtn$ = $('<button class="custom-button"><i class="fas fa-plus-square"></i> 추가</button>').jqxButton();
                    TemplateChilddelBtn$ = $('<button class="custom-button"><i class="fas fa-window-close"></i> 삭제</button>').jqxButton();
                    TemplateChildUpBtn$ = $('<button class="custom-button"><i class="fas fa-caret-square-up"></i> 위로</button>').jqxButton();
                    TemplateChildDownBtn$ = $('<button class="custom-button"><i class="fas fa-caret-square-down"></i> 아래로</button>').jqxButton();

                    TemplateChildAddBtn$.jqxButton({ disabled: true });
                    TemplateChilddelBtn$.jqxButton({ disabled: true });
                    TemplateChildUpBtn$.jqxButton({ disabled: true });
                    TemplateChildDownBtn$.jqxButton({ disabled: true });
                    container$.append(TemplateChildAddBtn$);
                    container$.append(TemplateChilddelBtn$);
                    container$.append(TemplateChildUpBtn$);
                    container$.append(TemplateChildDownBtn$);
                    statusbar.append(container$);
                    //행 추가
                    TemplateChildAddBtn$.on('click', function (e) {
                        var datarow = {};
                        datarow.isChange = "Y"
                        ScheduleTemplateChildGrd$.jqxGrid('addrow', null, datarow);
                    });
                    TemplateChilddelBtn$.on('click', function (e) {
                        var rowindex = ScheduleTemplateChildGrd$.jqxGrid('selectedrowindexes');
                        rowindex.sort();
                        var selectedRecords = new Array();
                        if (rowindex == null || rowindex == undefined) {
                            alert('삭제할 행을 선택하여 주세요');
                        } else {
                            if (confirm('삭제하시겠습니까?')) {
                                for (var i = rowindex.length - 1; i >= 0; i--) {
                                    var id = ScheduleTemplateChildGrd$.jqxGrid('getrowid', rowindex[i]);
                                    ScheduleTemplateChildGrd$.jqxGrid('deleterow', id);
                                }
                            }

                        }
                    });
                    TemplateChildUpBtn$.on('click', function (e) {
                        //var datarowIdx = ScheduleTemplateChildGrd$.jqxGrid('getselectedrowindex');

                        var row = ScheduleTemplateChildGrd$.jqxGrid('getrowdata', subkey);
                        var idx = row.boundindex - 1;
                        console.log(row);
                        if (row.uid == 0) {
                            return;
                        }
                        const childDataSource = ScheduleTemplateChildGrd$.jqxGrid("source").loadedData;
                        fMoveGridRecusive(childDataSource, row.OID, 'UP');
                        ScheduleTemplateChildGrd$.jqxGrid('updatebounddata');
                        //ScheduleTemplateParentGrd$.jqxGrid('setcellvalue', mkey, "isMove", "Y");
                        Data[mkey].isMove = "Y";
                        ScheduleTemplateChildGrd$.jqxGrid('clearselection');
                        if (idx >= 0) {
                            ScheduleTemplateChildGrd$.jqxGrid('selectrow', idx);
                        } else {
                            ScheduleTemplateChildGrd$.jqxGrid('selectrow', 0);
                        }
                    });
                    TemplateChildDownBtn$.on('click', function (e) {
                        //  var datarowIdx = ScheduleTemplateChildGrd$.jqxGrid('getselectedrowindexes');
                        var row = ScheduleTemplateChildGrd$.jqxGrid('getrowdata', subkey);
                        var idx = row.boundindex + 1;
                        var maxLength = ScheduleTemplateChildGrd$.jqxGrid('getrows').length;
                        if (row.uid == maxLength) {
                            return;
                        }
                        const childDataSource = ScheduleTemplateChildGrd$.jqxGrid("source").loadedData;
                        var midx = childDataSource.length - 1;
                        fMoveGridRecusive(childDataSource, row.OID, 'DOWN');
                        ScheduleTemplateChildGrd$.jqxGrid('updatebounddata');
                        // ScheduleTemplateParentGrd$.jqxGrid('setcellvalue', mkey, "isMove", "Y");
                        Data[mkey].isMove = "Y";
                        ScheduleTemplateChildGrd$.jqxGrid('clearselection');
                        if (idx <= midx) {
                            ScheduleTemplateChildGrd$.jqxGrid('selectrow', idx);
                        } else {
                            ScheduleTemplateChildGrd$.jqxGrid('selectrow', midx);
                        }
                    });
                }

            });
        ScheduleTemplateParentGrd$.on('rowselect', function (event) {
            var args = event.args;
            mkey = args.rowindex;
            var item = ScheduleTemplateParentGrd$.jqxGrid('getrowdata', args.rowindex);
            ScheduleTemplateChildGrd$.jqxGrid('clearselection');
            PrintJqxGrid(ScheduleTemplateChildsource, ScheduleTemplateChildGrd$, Data[args.rowindex].Cdata);
        });
        ScheduleTemplateParentGrd$.on('cellclick', function (event) {
            var args = event.args;
            mkey = args.rowindex;
            var item = ScheduleTemplateParentGrd$.jqxGrid('getrowdata', args.rowindex);
            ScheduleTemplateChildGrd$.jqxGrid('clearselection');
            PrintJqxGrid(ScheduleTemplateChildsource, ScheduleTemplateChildGrd$, Data[args.rowindex].Cdata);
        });

        ScheduleTemplateChildGrd$.on('rowselect', function (event) {
            var args = event.args;
            subkey = args.rowindex;
            var item = ScheduleTemplateChildGrd$.jqxGrid('getrowdata', args.rowindex);
            // console.log(Data[args.rowindex].Cdata);
            rowKey = args.rowindex;
            rowDataField = args.datafield;
        });
    });
    function getScheduleTemplateList(_Source, _Grid$, _param) {
        RequestData("/Pms/SelCustomerScheduleTemplate", _param, function (res) {
            Data = res;
            PrintJqxGrid(_Source, _Grid$, Data);
        });
    }
</script>