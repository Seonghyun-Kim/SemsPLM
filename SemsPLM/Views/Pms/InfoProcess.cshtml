@{
    Layout = null;
}

<div id="process_@ViewBag.OID" class="info_project clearfix">
    <div class="info_menubar">
        <ul>
            <li class="tab info_focus" info="properties"><i class="fas fa-info-circle"></i> 기본 정보</li>
            <li class="tab" info="wbs"><i class="fas fa-stream"></i> WBS</li>
            <li class="tab" info="resource"><i class="fas fa-users"></i> 멤버</li>
            <li class="tab" info="deliveries"><i class="fas fa-file-medical"></i> 산출물</li>
            <li class="tab" info="riskIssue"><i class="fas fa-exclamation"></i> 이슈</li>
            <li class="tab" info="Apphis"><i class="fas fa-stream"></i> 결재이력</li>
        </ul>
    </div>

    <div class="project_content">
        <div class="project_basic clearfix">
            <div class="basic_info">
                <h3>@ViewBag.ProjectDetail.Name<!--프로젝트 이름--></h3>
                <p>PM : <span>@ViewBag.ProjectDetail.PMNm</span></p>
            </div>
            <div class="basic_image">
                <ul class="image_thumbnail">
                    @if (ViewBag.ProjectDetail.Thumbnail != null)
                    {
                        <li>
                            <img class="img-thumbnail" src="@Url.Content("~/images/Thumbnail/")@ViewBag.ProjectDetail.Thumbnail" />
                        </li>
                    }
                </ul>
            </div>
            <div class="basic_status">
                <div class="pointer_wrap">
                    @for (int i = 0; i < ViewBag.Status.Count; i++)
                    {
                        <div class="pointer" data-type="@ViewBag.Status[i].Type" data-Status="@ViewBag.Status[i].StatusOID" style="z-index: @(ViewBag.Status.Count - i);">
                            <div class="project_status">@ViewBag.Status[i].StatusNm</div>
                        </div>
                    }
                </div>
                <p>설명 : <span>@ViewBag.ProjectDetail.Description</span></p>
            </div>
        </div>

        <div id="properties" class="basic_grid">
            <table class="tableTopButtonBox">
                <tbody>
                    <tr>
                        <td style="text-align: right;" id="">
                            @if (
                                    ((List<Common.Models.BPolicyAuth>)ViewBag.Detail.BPolicyAuths).FindIndex(item => item.AuthNm == Common.Constant.CommonConstant.AUTH_PROMOTE) > -1
                                    && ViewBag.ParentType != Common.Constant.PmsConstant.TYPE_TASK && ViewBag.Detail.BPolicy.Name == Common.Constant.PmsConstant.POLICY_PROCESS_STARTED && (ViewBag.ApprovStatus == null || ViewBag.ApprovStatus != Common.Constant.CommonConstant.POLICY_APPROVAL_STARTED)
                                )
                            {
                                <button id="procApprovalBtn_@ViewBag.OID" class="custom-button"><i class="fas fa-edit"></i> 결재</button>
                            }
                        </td>
                    </tr>
                </tbody>
            </table>
            <div class="propertiesInfo">
                <table class="infoTable">
                    <colgroup>
                        <col style="width:15%;" />
                        <col style="width:auto;" />
                        <col style="width:15%;" />
                        <col style="width:auto;" />
                    </colgroup>

                    <tr>
                        <th>구분</th>
                        <td colspan="3">
                            @ViewBag.Detail.ProcessType
                        </td>
                    </tr>
                    <tr>
                        <th>이름</th>
                        <td colspan="3">
                            @ViewBag.Detail.Name
                        </td>
                    </tr>
                    <tr>
                        <th>프로젝트명</th>
                        <td colspan="3">
                            @ViewBag.ProjectDetail.Name
                        </td>
                    </tr>
                    <tr>
                        <th>생성일</th>
                        <td>
                            @ViewBag.Detail.CreateDt
                        </td>
                        <th>생성자</th>
                        <td>
                        </td>
                    </tr>
                    <tr class="tr_tall">
                        <th>설명</th>
                        <td colspan="3">
                            @ViewBag.Detail.Description
                        </td>
                    </tr>
                    <tr>
                        <th>상태</th>
                        <td colspan="3">
                            @ViewBag.Detail.BPolicy.StatusNm
                        </td>
                    </tr>
                    <tr>
                        <th>달력</th>
                        <td colspan="3">
                            @ViewBag.ProjectDetail.Calendar.Name
                        </td>
                    </tr>
                    <tr>
                        <th>예상시작일</th>
                        <td>
                            @string.Format("{0:yyyy-MM-dd}", ViewBag.Detail.EstStartDt)
                        </td>
                        <th>실제시작일</th>
                        <td>
                            @(ViewBag.Detail.ActStartDt != null ? string.Format("{0:yyyy-MM-dd}", ViewBag.Detail.ActStartDt) : "")
                        </td>
                    </tr>
                    <tr>
                        <th>예상완료일</th>
                        <td>
                            @(ViewBag.Detail.EstEndDt != null ? string.Format("{0:yyyy-MM-dd}", ViewBag.Detail.EstEndDt) : "")
                        </td>
                        <th>실제완료일</th>
                        <td>
                            @(ViewBag.Detail.ActEndDt != null ? string.Format("{0:yyyy-MM-dd}", ViewBag.Detail.ActEndDt) : "")
                        </td>
                    </tr>
                    <tr>
                        <th>예상기간</th>
                        <td>
                            @ViewBag.Detail.EstDuration
                        </td>
                        <th>실기간</th>
                        <td>
                            @ViewBag.Detail.ActDuration
                        </td>
                    </tr>
                </table>
            </div>
        </div>

        <div id="wbs" class="basic_grid dective">
            <div id="wbsInfo_@ViewBag.OID"></div>
        </div>

        <div id="resource" class="basic_grid dective">
            <div id="resourceInfo_@ViewBag.OID"></div>
        </div>

        <div id="deliveries" class="basic_grid dective">
            <div id="deliveriesInfo_@ViewBag.OID"></div>
        </div>

        <div id="riskIssue" class="basic_grid dective">
            <div id="riskIssueInfo_@ViewBag.OID"></div>
        </div>

        <div id="Apphis" class="basic_grid dective">
            <div id="ApphisInfo_@ViewBag.OID">
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(function () {
        const OID = '@ViewBag.OID';
        const ProjectOID = '@ViewBag.ProjectOID';
        const screenWidth = $('.project_content').width();
        const screenHeight = $('.project_content').height() - 152;
        const procDiv$ = $('#process_' + OID);
        const current = @ViewBag.Detail.BPolicyOID;
        const headerStatus = $('#process_' + OID + ' .pointer_wrap .pointer');
        const parentType = '@ViewBag.ParentType';
        if (headerStatus != null && headerStatus.length > 0) {
            headerStatus.removeClass('pointer_focus');
            const currentStatus = headerStatus.filter(function (index, item) {
                return item.getAttribute('data-Status') == current;
            });
            if (currentStatus != null && currentStatus.length > 0) {
                currentStatus[0].className += ' ' + 'pointer_focus';
            }
            if (parentType == '@Common.Constant.PmsConstant.TYPE_TASK' && '@ViewBag.Detail.BPolicy.Name' != '@Common.Constant.PmsConstant.POLICY_PROCESS_COMPLETED') {
                fStatusAction(headerStatus, current, OID);
            }
        }

        $('#procApprovalBtn_' + OID).on('click', function () {
            if ('@ViewBag.isApproval' == '@Common.Constant.CommonConstant.ACTION_NO') {
                alert('결재가 필요한 이슈가 남아있습니다.');
            }
            RequestData('/Pms/ApprovProcess', { 'OID': OID }, function (res) {
                setTimeout(function () {
                    OpenApprovalDialog(function () {
                        PageReload();
                    }, null, { TargetOID: OID, AutoStatus: false }, '/Common/Approval', '결재');
                }, 50)
            });
        });

        $('#process_' + OID + ' .tab').on('click', function () {
            if ($(this).hasClass('info_focus')) {
                return;
            }
            const self$ = $(this);
            const infoValue = self$.attr('info');
            //control side menu
            procDiv$.find('[class="tab info_focus"]').removeClass('info_focus');
            self$.addClass('info_focus');
            procDiv$.find('[class="basic_grid"]').addClass('dective');
            procDiv$.find('[id="' + infoValue + '"]').removeClass('dective');

            if (infoValue == 'properties') {

            } else if (infoValue == 'wbs') {

                var processDatas = [];

                var source =
                {
                    dataType: "json",
                    dataFields: [
                        //System Mandatory
                        { name: 'OID', type: 'number' },
                        { name: 'RootOID', type: 'number' },
                        { name: 'FromOID', type: 'number' },
                        { name: 'ToOID', type: 'number' },
                        { name: 'Children', type: 'array' },
                        { name: 'Action', type: 'string' },
                        { name: 'Ord', type: 'number' },

                        //System Option
                        { name: 'expanded', type: 'bool' },

                        //Object Mandatory
                        { name: 'ObjName', type: 'string' },
                        { name: 'ObjType', type: 'string' },
                        { name: 'Id', type: 'number' },
                        { name: 'Dependency', type: 'string' },
                        { name: 'ObjSt', type: 'number' },
                        { name: 'ObjStNm', type: 'string' },
                        { name: 'Complete', type: 'number' },
                        { name: 'Members', type: 'array' },
                        { name: 'EstDuration', type: 'number' },
                        { name: 'EstStartDt', type: 'date' },
                        { name: 'EstEndDt', type: 'date' },
                        { name: 'ActDuration', type: 'number' },
                        { name: 'ActStartDt', type: 'date' },
                        { name: 'ActEndDt', type: 'date' },
                        { name: 'Level', type: 'number' },
                        { name: 'Delay', type: 'number' },
                        { name: 'Deliveries', type: 'number' },
                        { name: 'No', type: 'string' },

                        //Object Optional
                        { name: 'Description', type: 'string' },
                    ],
                    hierarchy:
                    {
                        root: 'Children',
                    },
                    id: 'ToOID',
                };

                var dataAdapter = new $.jqx.dataAdapter(source);
                const procWbsInfo$ = $("#wbsInfo_" + OID);
                procWbsInfo$.jqxTreeGrid('render');
                procWbsInfo$.jqxTreeGrid({
                    width: screenWidth,
                    height: screenHeight,
                    theme: "kdnc",
                    source: dataAdapter,
                    columnsResize: true,
                    sortable: false,
                    checkboxes: false,
                    selectionMode: "custom",
                    editable: false,
                    pagerButtonsCount: 8,
                    toolbarHeight: 44,
                    editSettings: { saveOnPageChange: true, saveOnBlur: true, saveOnSelectionChange: true, cancelOnEsc: true, saveOnEnter: true, editSingleCell: true, editOnDoubleClick: true, editOnF2: true },
                    ready: function () {

                    },
                    columns: [
                        {
                            text: '이름', dataField: 'ObjName', width: '20%', pinned: true, align: 'center',
                            cellsRenderer: function (row, dataField, cellValue, rowData, cellText) {
                                const editable = procWbsInfo$.jqxTreeGrid('editable');
                                if (editable) {
                                    return cellValue;
                                } else {
                                    var vText = cellText;
                                    return vText + ' <a href="#" onclick="PmsNewTabClick(' + ProjectOID + ', \'' + '@ViewBag.ProjectDetail.Name' + '\', \'/Pms/InfoProcess\', ' + rowData.ToOID + ', \'' + rowData.ObjName + '\')" ><i class="fas fa-window-maximize"></i></a>';
                                }
                            }
                        },
                        { text: '구분', dataField: 'ObjType', width: '5%', align: 'center', editable: false, cellsAlign: 'center', },
                        { text: 'Id', dataField: 'Id', width: '4%', align: 'center', editable: false, cellsAlign: 'center', },
                        { text: 'NO', dataField: 'No', width: '6%', align: 'center', editable: false, cellsAlign: 'left', },
                        { text: '레벨', dataField: 'Level', width: '4%', align: 'center', editable: false, cellsAlign: 'center', },
                        { text: 'Predecessor', dataField: 'Dependency', columnGroup: 'Dependency', width: '7%', align: 'center', cellsAlign: 'center', },
                        { text: '산출물', dataField: 'Deliveries', width: '4%', align: 'center', editable: false, cellsAlign: 'center', },
                        { text: '상태', dataField: 'ObjStNm', width: '4%', align: 'center', editable: false, cellsAlign: 'center', },
                        {
                            text: '진행', dataField: 'Delay', width: '4%', align: 'center', editable: false, cellsAlign: 'center',
                            cellsRenderer: function (row, dataField, cellValue, rowData, cellText) {
                                if (('@ViewBag.ProjectDetail.BPolicyNm' == '@Common.Constant.PmsConstant.POLICY_PROJECT_STARTED')
                                    && (rowData.ObjType.toUpperCase() != '@Common.Constant.PmsConstant.TYPE_PROJECT' && rowData.ObjType.toUpperCase() != '@Common.Constant.PmsConstant.TYPE_PHASE') && (rowData.ActStartDt == null || rowData.ActStartDt == undefined)) {
                                    if (!gPmsModifyHistoryMaster.hasOwnProperty(ProjectOID)) {
                                        gPmsModifyHistoryMaster[ProjectOID] = { obj: procWbsInfo$, data: processDatas, source: source };
                                    }
                                    return "<button class='custom-button tskStartBtn' data-type='" + rowData.ObjType + "' data-status='" + rowData.ObjSt + "'  onclick='fTaskStart(this, " + ProjectOID + ", " + row + ")'><i class='fas fa-caret-right'></i> 시작</button>";
                                }

                                if (cellText == null || cellText == undefined || cellText.length < 1) {
                                    return "";
                                }

                                var targetDelay = @Common.Constant.PmsConstant.DELAY;
                                var iCellText = parseInt(cellText);
                                if (iCellText >= 1 && iCellText <= targetDelay) {
                                    return '<div style="width:100%;text-align: center;"><div style="display:inline-bViewBagock;width:20px;height:20px;border-radius:50%;background-color:@Common.Constant.PmsConstant.WARNING_COLOR;"></div></div>';
                                } else if (iCellText > targetDelay) {
                                    return '<div style="width:100%;text-align: center;"><div style="display:inline-block;width:20px;height:20px;border-radius:50%;background-color:@Common.Constant.PmsConstant.DELAY_COLOR;"></div></div>';
                                } else {
                                    return '<div style="width:100%;text-align: center;"><div style="display:inline-block;width:20px;height:20px;border-radius:50%;background-color:#0f0;"></div></div>';
                                }
                                return cellText;
                            },
                        },
                        { text: '% 완료', dataField: 'Complete', width: '4%', align: 'center', editable: false, cellsAlign: 'center', },
                        {
                            text: '멤버', dataField: 'Members', width: '14%', align: 'center', editable: false,
                            cellsRenderer: function (row, dataField, cellValue, rowData, cellText) {
                                if (row == ProjectOID) {
                                    return;
                                }
                                if (cellValue != null && cellValue != undefined) {
                                    if (cellValue.length > 0) {
                                        var tmpTag = "<div style='text-align: center;width:100%;height:20px;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;'><div style='width:1000px;height:20px;'>";
                                        for (var index = 0; index < cellValue.length; index++) {
                                            if (cellValue[index].Thumbnail != null) {
                                                tmpTag += "<div class='wbsMember'><div class='memberImg'><img src='@Url.Content("~/images/Thumbnail/")" + cellValue[index].Thumbnail + "'></div>" + cellValue[index].PersonNm +"&nbsp;</div>";
                                            } else {
                                                tmpTag += "<div class='wbsMember'><div class='memberImg'><i class='fa fa-user-circle-o' aria-hidden='true'></i></div>" + cellValue[index].PersonNm + "</div>";
                                            }
                                        }
                                        tmpTag += "</div></div>";
                                        return tmpTag;
                                    }
                                }
                            }
                        },
                        {
                            text: '지연일수', width: '5%', align: 'center', editable: false, cellsAlign: 'center',
                            cellsRenderer: function (row, dataField, cellValue, rowData, cellText) {
                                return (rowData.Delay == null || rowData.Delay == undefined || rowData.Delay.length < 1 ? "" : rowData.Delay);
                            }
                        },
                        { text: '기간', dataField: 'EstDuration', columnGroup: 'Estimated', width: '4%', align: 'center', cellsAlign: 'center', },
                        { text: '시작일', dataField: 'EstStartDt', columnGroup: 'Estimated', cellsFormat: 'yyyy-MM-dd', width: '7%', align: 'center', className: 'datePicker', cellsAlign: 'center', },
                        { text: '완료일', dataField: 'EstEndDt', columnGroup: 'Estimated', cellsFormat: 'yyyy-MM-dd', width: '7%', align: 'center', className: 'datePicker', cellsAlign: 'center', },
                        { text: '기간', dataField: 'ActDuration', columnGroup: 'Actual', width: '4%', align: 'center', editable: false, cellsAlign: 'center', },
                        { text: '시작일', dataField: 'ActStartDt', columnGroup: 'Actual', cellsFormat: 'yyyy-MM-dd', width: '7%', align: 'center', editable: false, cellsAlign: 'center', },
                        { text: '완료일', dataField: 'ActEndDt', columnGroup: 'Actual', cellsFormat: 'yyyy-MM-dd', width: '7%', align: 'center', editable: false, cellsAlign: 'center', },
                        { text: '설명', dataField: 'Description', align: 'center', width: '8%', },
                    ],
                    columnGroups: [
                        { text: '예상', name: 'Estimated' },
                        { text: '실제', name: 'Actual' },
                        { text: 'Dependency', name: 'Dependency' },
                    ],
                    showToolbar: @Json.Encode(((List<Common.Models.BPolicyAuth>)ViewBag.Detail.BPolicyAuths).FindIndex(item => item.AuthNm == Common.Constant.CommonConstant.AUTH_MODIFY) > -1),
                    renderToolbar: function (toolBar) {
                        toolBar.empty();
                    },
                    pagerRenderer: function () {
                        RequestData('/Pms/SelProcessWbs', { 'OID': OID, 'RootOID': ProjectOID }, function (res) {
                            processDatas = [];
                            processDatas.push(res);
                            PrintJqxTreeGrid(source, procWbsInfo$, processDatas);
                        });
                    }
                });
                procWbsInfo$.jqxTreeGrid('pagerRenderer');

            } else if (infoValue == 'resource') {
                const resourceSource = {
                    datatype: 'json',
                    datafields: [
                        //System Mandatory
                        { name: 'RootOID', type: 'number' },
                        { name: 'FromOID', type: 'number' },
                        { name: 'ToOID', type: 'number' },
                        { name: 'OID', type: 'number' },
                        { name: 'Ord', type: 'number' },
                        { name: 'RoleOID', type: 'number' },
                        { name: 'RoleOIDNm', type: 'string' },
                        { name: 'Description', type: 'string' },
                        { name: 'PersonNm', type: 'string' },
                        { name: 'DepartmentNm', type: 'string' },
                        { name: 'Action', type: 'string' },
                        { name: 'diseditable', type: 'array' },
                        { name: 'Thumbnail', type: 'string' },
                    ],
                    id: 'ToOID',
                    addRow: function (rowID, rowData, position, parentID, commit) {
                        commit(true);
                    },
                    deleteRow: function (rowID, commit) {
                        commit(true);
                    },
                    updateRow: function (rowID, rowData, commit) {
                        commit(true);
                    }
                };

                var resourceAdapter = new $.jqx.dataAdapter(resourceSource);
                const resourceGrd$ = $("#resourceInfo_" + OID);
                resourceGrd$.jqxTreeGrid('render');
                resourceGrd$.jqxTreeGrid({
                    theme: 'arctic',
                    width: "100%",
                    pagerButtonsCount: 8,
                    toolbarHeight: 35,
                    height: screenHeight,
                    source: resourceAdapter,
                    sortable: false,
                    pageable: false,
                    selectionMode: "custom",
                    editable: false,
                    editSettings: { saveOnPageChange: true, saveOnBlur: true, saveOnSelectionChange: true, cancelOnEsc: true, saveOnEnter: true, editSingleCell: true, editOnDoubleClick: true, editOnF2: true },
                    showtoolbar: false,
                    columnsResize: true,
                    checkboxes: false,
                    columns: [
                        {
                            text: '멤버', width: "15%", datafield: 'PersonNm', align: 'center', editable: false,
                            cellsrenderer: function (row, column, value) {
                                var rowData = resourseData.filter(function (item) {
                                    return item.ToOID == row;
                                });
                                if (rowData.length < 1 || rowData[0].Thumbnail == null) {
                                   return "<div class='pmsMember'><div class='memberImg'><i class='fa fa-user-circle-o' aria-hidden='true'></i></div>" + value + "</div>";
                                } else {
                                   return "<div class='pmsMember'><div class='memberImg'><img src='@Url.Content("~/images/Thumbnail/")" + rowData[0].Thumbnail + "'></div>" + value + "</div>";
                                }
                            }
                        },
                        { text: '역할', datafield: 'RoleOIDNm', width: "15%", align: 'center', cellsalign: 'center', cellsrenderer: renderWord, columnType: "template", },
                        { text: '부서', datafield: 'DepartmentNm', width: "15%", align: 'center', cellsalign: 'center', cellsrenderer: renderWord, editable: false, },
                        { text: '설명', datafield: 'Description', width: "55%", align: 'center', cellsalign: 'left', cellsrenderer: renderWord },
                    ],
                    pagerRenderer: function () {
                        RequestData("/Pms/SelMembers", { 'FromOID': OID }, function (res) {
                            resourseData = res;
                            PrintJqxTreeGrid(resourceSource, resourceGrd$, res);
                        });
                    }
                });

                resourceGrd$.jqxTreeGrid('pagerRenderer');

            } else if (infoValue == 'deliveries') {
                //TODO: TASK 산출물
                var deliveriesparam = {};
                deliveriesparam.RootOID = ProjectOID;
                deliveriesparam.FromOID = OID;

                const deliveriesSource = {
                    datatype: 'json',
                    datafields: [
                        { name: 'RelOID', type: 'number' },
                        { name: 'RelType', type: 'string' },
                        { name: 'Children', type: 'array' },
                        { name: 'expanded', type: 'bool' },
                        { name: 'Files', type: 'number' },

                        { name: 'DocToOID', type: 'number' },
                        { name: 'DocClassOID', type: 'number' },

                        { name: 'DocClassPID', type: 'number' },
                        { name: 'DocClassPIDNm', type: 'string' },
                        { name: 'DocName', type: 'string' },
                        { name: 'DocOID', type: 'number' },
                        { name: 'DocNo', type: 'string' },
                        { name: 'DocNoNm', type: 'string' },
                        { name: 'DocSt', type: 'number' },

                        { name: 'DocStNm', type: 'string' },
                        { name: 'DocRev', type: 'string' },
                        { name: 'DatabaseFl', type: 'string' },
                        { name: 'LinkOID', type: 'number' },
                        { name: 'ViewUrl', type: 'string' },
                        { name: 'EditUrl', type: 'string' },
                        { name: 'PMSViewUrl', type: 'string' },
                        { name: 'PMSEditUrl', type: 'string' },
                        { name: 'UseFl', type: 'string' },
                        { name: 'CreateDt', type: 'date' },
                        { name: 'CreateUsNm', type: 'string' },
                        { name: 'ModifyDt', type: 'date' },
                        { name: 'ModifyUsNm', type: 'date' },
                        { name: 'FromNm', type: 'string' },

                        { name: 'OID', type: 'number' },
                        { name: 'FromOID', type: 'number' },
                        { name: 'ToOID', type: 'number' },
                        { name: 'RootOID', type: 'number' },
                        { name: 'ProjectNm', type: 'string' },
                        { name: 'DocClassNm', type: 'string' },
                        { name: 'TaskNm', type: 'string' },
                        { name: 'Type', type: 'string' },
                        { name: 'BPolicyAuths', type: 'Array' },
                    ],
                    hierarchy:
                    {
                        root: 'Children',
                    },
                    id: 'OID',
                };

                var deliveriesAdapter = new $.jqx.dataAdapter(deliveriesSource);
                const deliveriesGrd$ = $("#deliveriesInfo_" + OID);
                deliveriesGrd$.jqxTreeGrid('render');
                deliveriesGrd$.jqxTreeGrid({
                    theme: 'kdnc',
                    width: "100%",
                    pagerButtonsCount: 8,
                    toolbarHeight: 44,
                    height: screenHeight,
                    source: deliveriesAdapter,
                    sortable: false,
                    pageable: false,
                    selectionMode: "custom",
                    editable: false,
                    editSettings: { saveOnPageChange: true, saveOnBlur: true, saveOnSelectionChange: true, cancelOnEsc: true, saveOnEnter: true, editSingleCell: true, editOnDoubleClick: true, editOnF2: true },
                    columnsResize: true,
                    checkboxes: true,
                    columns: [
                        { text: '분류체계', width: "18%", datafield: 'DocClassNm', align: 'center', },
                        { text: '프로젝트', width: "22%", datafield: 'ProjectNm', align: 'center', cellsalign: 'center' },
                        { text: 'Task명', width: "9%", datafield: 'TaskNm', align: 'center', cellsalign: 'center' },
                        { text: '문서명', width: "20%", datafield: 'DocNm', align: 'center', cellsalign: 'center' },
                        {
                            text: 'Action', width: "6%", align: 'center', cellsalign: 'center',
                            cellsRenderer: function (row, dataField, cellValue, rowData, cellText) {
                                if (rowData.BPolicyAuths != null) {
                                    var chkAuths = rowData.BPolicyAuths.findIndex(function (item) {
                                        return item.AuthNm == '@Common.Constant.CommonConstant.AUTH_MODIFY'
                                    });
                                    if (chkAuths > -1) {
                                        if (rowData.Type == '@Common.Constant.PmsConstant.RELATIONSHIP_DOC_MASTER') {
                                            gPmsModifyDeliveryMaster[row] = { source: deliveriesSource, obj$: deliveriesGrd$ };
                                            btnAddAction = "<img src= '/Images/doc_add.png' alt='생성' style='border:0px;width:17px;cursor:pointer;' onclick='ProjectInfoDoc(" + row + ")'>"
                                            if (rowData.DocClassNm == "@Common.Constant.DocClassConstant.ATTRIBUTE_RELIABILITY_REPORT") {
                                                btnSearchAction = "<img src= '/Images/search.png' alt='신뢰성 결과서 추가' style='border:0px;width:17px;cursor:pointer;' onclick='ProjectSearchDoc(" + row + ")'>"
                                                return "<div>" + btnSearchAction + "</div>";
                                            }
                                            return "<div>" + btnAddAction + "</div>";
                                        }
                                    }
                                }
                            },
                        },
                        { text: '리비전', width: "4%", datafield: 'DocRev', align: 'center', cellsalign: 'center' },
                        { text: '상태', width: "5%", datafield: 'DocStNm', align: 'center', cellsalign: 'center' },
                        { text: '생성일', width: "8%", datafield: 'CreateDt', align: 'center', cellsFormat: 'yyyy-MM-dd', cellsalign: 'center' },
                        { text: '생성자', width: "8%", datafield: 'CreateUsNm', align: 'center', cellsalign: 'center' },
                    ],
                    showtoolbar:@Json.Encode((((List<Common.Models.BPolicyAuth>)ViewBag.ProjectDetail.BPolicyAuths).FindIndex(item => item.AuthNm == Common.Constant.CommonConstant.AUTH_RELATION) > -1 || ((List<Common.Models.BPolicyAuth>)ViewBag.Detail.BPolicyAuths).FindIndex(item => item.AuthNm == Common.Constant.CommonConstant.AUTH_RELATION) > -1) && (ViewBag.ApprovStatus == null || ViewBag.ApprovStatus != Common.Constant.CommonConstant.POLICY_APPROVAL_STARTED)),
                    rendertoolbar: function (statusbar) {
                        if (statusbar[0].children.length > 0) {
                            return;
                        }
                        var container = $("<div class='lGridComponent' style='text-align: left;'></div>");
                        var btnClassificationNewAdd = $("<button class='custom-button'><i class='fas fa-plus'></i> 분류체계 등록</button>").jqxButton();
                        var btnDelete = $("<button class='custom-button'><i class='fas fa-plus'></i> 삭제</button>").jqxButton();
                        btnDelete.jqxButton({ disabled: true });
                        container.append(btnClassificationNewAdd);
                        container.append(btnDelete);
                        statusbar.append(container);

                        btnClassificationNewAdd.click(function (event) {
                            OpenNewAddDocClassification(function (res) {
                                getProjectDocumentClassificationList(deliveriesSource, deliveriesGrd$, deliveriesparam);
                            }, null, deliveriesparam, '/Pms/dlgDocClassDeliveries', '문서 분류 검색 추가', deliveriesGrd$, "Task");
                        });

                        btnDelete.click(function (event) {
                            var deltaskparam = {};
                            var deltaskItem = deliveriesGrd$.jqxTreeGrid('getCheckedRows');

                            if (deltaskItem.length < 1) {
                                alert("선택이 되지 않았습니다.")
                                return;
                            }
                            deltaskparam.OID = deltaskItem[0].OID;

                            deltaskparam.RootOID = deltaskItem[0].RootOID;
                            deltaskparam.FromOID = deltaskItem[0].FromOID;
                            deltaskparam.ToOID = deltaskItem[0].ToOID;
                            deltaskparam.Type = deltaskItem[0].Type;

                            deliveriesparam.RootOID = ProjectOID;
                            deliveriesparam.FromOID = OID;

                            RequestData("/Pms/DelProjectDocumentClassification", deltaskparam, function (res) {
                                getProjectDocumentClassificationList(deliveriesSource, deliveriesGrd$, deliveriesparam);
                                deliveriesGrd$.jqxTreeGrid('expandAll');
                            });
                        });

                        var actionContent = function (action) {
                            switch (action.toUpperCase()) {
                                case 'SELECT':
                                    btnDelete.jqxButton({ disabled: false });
                                    break;
                                case 'UNSELECT':
                                    btnDelete.jqxButton({ disabled: true });
                                    break;
                            }
                        }

                        var rowKey = null;
                        deliveriesGrd$.on('rowCheck', function (event) {
                            const previousRowKey = rowKey;
                            var args = event.args;
                            if (previousRowKey != null && rowKey == previousRowKey) {
                                deliveriesGrd$.jqxTreeGrid('uncheckRow', previousRowKey);
                            }
                            rowKey = args.key;
                            actionContent('SELECT');
                        });

                        deliveriesGrd$.on('rowUncheck', function (event) {
                            actionContent('UNSELECT');
                            rowKey = null;
                        });
                    },
                    pagerRenderer: function () {
                    }
                });
                deliveriesGrd$.on('rowDoubleClick', function (event) {
                    const args = event.args;
                    const key = args.key;
                    const row = args.row;
                    if (row.Type == '@Common.Constant.PmsConstant.RELATIONSHIP_DOC_CLASS') {
                        var param = {};
                        param.OID = row.ToOID;
                        if (row.ViewUrl == null) {
                            param.Type = '@Common.Constant.DocumentConstant.TYPE_DOCUMENT';
                            if (gClickDuplication) { return; }
                            gClickDuplication = true;
                            setTimeout(function () {
                                OpenPmsDocumentDialog(function (res) {
                                    getProjectDocumentClassificationList(deliveriesSource, deliveriesGrd$, deliveriesparam);
                                }, null, param, '/Pms/InfoDocument', '문서 상세');
                                gClickDuplication = false;
                            }, 250);
                        } else {
                            if (row.DocClassNm == "@Common.Constant.DocClassConstant.ATTRIBUTE_RELIABILITY") {
                                setTimeout(function () {
                                    OpenInfoReliabilityDialog(function (res) {
                                        getProjectDocumentClassificationList(deliveriesSource, deliveriesGrd$, deliveriesparam);
                                    }, null, param, '/Pms/dlgInfoReliabilityForm', '신뢰성 시험 의뢰서 상세');
                                    gClickDuplication = false;
                                }, 250);
                            } else {
                                setTimeout(function () {
                                    OpenInfoReliabilityReportDialog(function (res) {
                                        getProjectDocumentClassificationList(deliveriesSource, deliveriesGrd$, deliveriesparam);
                                    }, null, param, '/Pms/dlgInfoReliabilityReport', '신뢰성 시험 결과서 상세');
                                    gClickDuplication = false;
                                }, 250);
                            }
                        }
                    }
                });
                getProjectDocumentClassificationList(deliveriesSource, deliveriesGrd$, deliveriesparam);

                function getProjectDocumentClassificationList(_Source, _Grid$, _param) {
                    RequestData("/Pms/SelPmsDocumentClassification", _param, function (res) {
                        PrintJqxTreeGrid(_Source, _Grid$, res);
                        _Grid$.jqxTreeGrid('expandAll');
                    });
                }


            } else if (infoValue == 'riskIssue') {
                const issueRiskSource = {
                    datatype: 'json',
                    datafields: [
                        { name: 'OID',              type: 'number' },
                        { name: 'Name',             type: 'string' },
                        { name: 'ProjectNm',        type: 'string' },
                        { name: 'Type',             type: 'string' },
                        { name: 'Description',      type: 'string' },
                        { name: 'CreateUs',         type: 'number' },
                        { name: 'CreateUsNm',       type: 'string' },
                        { name: 'TaskNm',           type: 'string' },
                        { name: 'IssueType',        type: 'string' },
                        { name: 'IssueTypeNm',      type: 'string' },
                        { name: 'CreateDt',         type: 'date' },
                        { name: 'EstFinDt',         type: 'date' },
                        { name: 'Importance',       type: 'number' },
                        { name: 'ImportanceNm',     type: 'string' },
                        { name: 'BPolicy',          type: 'Array' },
                    ],
                    id: 'OID',
                    addRow: function (rowID, rowData, position, parentID, commit) {
                        commit(true);
                    },
                    deleteRow: function (rowID, commit) {
                        commit(true);
                    },
                    updateRow: function (rowID, rowData, commit) {
                        commit(true);
                    }
                };

                var issueRiskAdapter = new $.jqx.dataAdapter(issueRiskSource);
                const issueRiskGrd$ = $("#riskIssueInfo_" + OID);
                issueRiskGrd$.jqxTreeGrid('render');
                issueRiskGrd$.jqxTreeGrid({
                    theme: 'arctic',
                    width: "100%",
                    pagerButtonsCount: 8,
                    toolbarHeight: 44,
                    height: screenHeight,
                    source: issueRiskAdapter,
                    sortable: false,
                    pageable: false,
                    selectionMode: "custom",
                    editable: false,
                    editSettings: { saveOnPageChange: true, saveOnBlur: true, saveOnSelectionChange: true, cancelOnEsc: true, saveOnEnter: true, editSingleCell: true, editOnDoubleClick: true, editOnF2: true },
                    showtoolbar: true,
                    columnsResize: true,
                    checkboxes: true,
                    columns: [
                        { text: '이슈', cellsalign: 'left', align: 'center', datafield: 'Name', width: '22%' },
                        { text: '프로젝트', cellsalign: 'center', align: 'center', datafield: 'ProjectNm', width: '20%' },
                        { text: 'Task', cellsalign: 'center', align: 'center', datafield: 'TaskNm', width: '18%' },
                        {
                            text: '상태', datafield: 'BPolicy', width: '6%', cellsalign: 'center', align: 'center',
                            cellsrenderer: function (row, column, value) {
                                return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:1.9;'>" + value.StatusNm + "</div>";
                            },
                        },
                        { text: '중요도', cellsalign: 'center', align: 'center', datafield: 'ImportanceNm', width: '5%' },
                        { text: '작성일', cellsalign: 'center', align: 'center', datafield: 'CreateDt', width: '8%', cellsFormat: 'yyyy-MM-dd', },
                        { text: '작성자', cellsalign: 'center', align: 'center', datafield: 'CreateUsNm', width: '5%' },
                        { text: '예상처리일', cellsalign: 'center', align: 'center', datafield: 'EstFinDt', width: '8%', cellsFormat: 'yyyy-MM-dd', },
                        { text: '처리완료일', cellsalign: 'center', align: 'center', datafield: 'ActProcessDt', width: '8%', cellsFormat: 'yyyy-MM-dd', },
                    ],
                    showtoolbar: @Json.Encode((((List<Common.Models.BPolicyAuth>)ViewBag.ProjectDetail.BPolicyAuths).FindIndex(item => item.AuthNm == Common.Constant.CommonConstant.AUTH_RELATION) > -1 || ((List<Common.Models.BPolicyAuth>)ViewBag.Detail.BPolicyAuths).FindIndex(item => item.AuthNm == Common.Constant.CommonConstant.AUTH_RELATION) > -1) && (ViewBag.ApprovStatus == null || ViewBag.ApprovStatus != Common.Constant.CommonConstant.POLICY_APPROVAL_STARTED)),
                    rendertoolbar: function (statusbar) {
                        if (statusbar[0].children.length > 0) {
                            return;
                        }
                        var container = $("<div class='lGridComponent' style='text-align: left;'></div>");
                        var btnNewAdd = $("<button class='custom-button'><i class='fas fa-plus'></i> 생성</button>").jqxButton();
                        var btnDelete = $("<button class='custom-button'><i class='fas fa-plus'></i> 삭제</button>").jqxButton();
                        btnDelete.jqxButton({ disabled: true });
                        container.append(btnNewAdd);
                        container.append(btnDelete);
                        statusbar.append(container);

                        btnNewAdd.click(function (event) {
                            var param = {};
                            param.ProjectNm = '@ViewBag.ProjectDetail.Name';
                            param.TaskNm = '@ViewBag.Detail.Name';
                            param.Type = '@Common.Constant.PmsConstant.TYPE_ISSUE_TASK';
                            param.RootOID = ProjectOID;
                            param.FromOID = OID;
                            OpenIssueDialog(function (res) {
                                RequestData('/Pms/SelIssue', param, function (res) {
                                    PrintJqxTreeGrid(issueRiskSource, issueRiskGrd$, res);
                                });
                            }, null, param , '/Pms/CreateIssue', '이슈 등록');
                        });

                        btnDelete.click(function (event) {
                        });

                        var actionContent = function (action) {
                            switch (action.toUpperCase()) {
                                case 'SELECT':
                                    btnDelete.jqxButton({ disabled: false });
                                    break;
                                case 'UNSELECT':
                                    btnDelete.jqxButton({ disabled: true });
                                    break;
                            }
                        }
                        var rowKey = null;
                        issueRiskGrd$.on('rowCheck', function (event) {
                            const previousRowKey = rowKey;
                            var args = event.args;
                            if (previousRowKey != null && rowKey == previousRowKey) {
                                issueRiskGrd$.jqxTreeGrid('uncheckRow', previousRowKey);
                            }
                            rowKey = args.key;
                            actionContent('SELECT');
                        });
                        issueRiskGrd$.on('rowUncheck', function (event) {
                            actionContent('UNSELECT');
                            rowKey = null;
                        });
                        issueRiskGrd$.on('rowDoubleClick', function (e) {
                            var param = {};
                            param.OID = e.args.key;
                            param.Type = '@Common.Constant.PmsConstant.TYPE_ISSUE_TASK';
                            param.RootOID = ProjectOID;
                            param.FromOID = OID;
                            param.ProjectNm = '@ViewBag.ProjectDetail.Name';
                            param.TaskNm = '@ViewBag.Detail.Name';
                            if (param.OID == null) {
                                return;
                            }

                            if (gClickDuplication) { return; }
                            gClickDuplication = true;
                            setTimeout(function () {
                                OpenIssueDialog(
                                    function (res) {
                                        RequestData('/Pms/SelIssue', param, function (res) {
                                            PrintJqxTreeGrid(issueRiskSource, issueRiskGrd$, res);
                                        });
                                    }, null, param, '/Pms/InfoIssue', '이슈 상세');
                                gClickDuplication = false;
                            }, 100);
                        });
                    },
                    pagerRenderer: function () {
                        RequestData('/Pms/SelIssue', { 'RootOID': ProjectOID, 'FromOID': OID }, function (res) {
                            PrintJqxTreeGrid(issueRiskSource, issueRiskGrd$, res);
                        });
                    }
                });
                issueRiskGrd$.jqxTreeGrid('pagerRenderer');
            } else if (infoValue == 'Apphis') {
                RequestHtml('/Common/ApprovalHistory', { OID: OID }, function (res) {
                    $('#ApphisInfo_' + OID).html(res);
                });
            }
        });
    });

    function ProjectInfoDoc(_rowData) {
        var row$ = gPmsModifyDeliveryMaster[_rowData];
        var param = {};
        var row = row$.obj$.jqxTreeGrid('getRow', _rowData);
        param.DocType = row.ToOID;
        param.DocType_KorNm = row.DocClassNm;
        param.RootOID = row.RootOID;
        if (param.RootOID != param.FromOID) {
            param.TaskOID = row.FromOID;
        }
        param.FromOID = row.ToOID;
        if (row.ViewUrl != null) {
            if (row.DocClassNm == "@Common.Constant.DocClassConstant.ATTRIBUTE_RELIABILITY") {
                OpenReliabilityDialog(function () {
                    RequestData("/Pms/SelPmsDocumentClassification", { RootOID: param.RootOID }, function (res) {
                        PrintJqxTreeGrid(row$.source, row$.obj$, res);
                        row$.obj$.jqxTreeGrid('expandAll');
                    });
                }, null, param, '/Pms/dlgReliabilityForm', '신뢰성 시험 의뢰서');
            }
            else {

            }
        } else {
            param.DocGroup = '@Common.Constant.DocClassConstant.TYPE_DOCCLASS';
            OpenPmsDocumentDialog(function () {
                RequestData("/Pms/SelPmsDocumentClassification", { RootOID: param.RootOID, FromOID: @ViewBag.OID }, function (res) {
                    PrintJqxTreeGrid(row$.source, row$.obj$, res);
                    row$.obj$.jqxTreeGrid('expandAll');
                });
            }, null, param, '/Pms/CreateDocument', '문서 등록');
        }
    }

    function ProjectSearchDoc(_rowData) {
        var row$ = gPmsModifyDeliveryMaster[_rowData];
        var param = {};
        var row = row$.obj$.jqxTreeGrid('getRow', _rowData);
        param.DocType = row.ToOID;
        param.DocType_KorNm = row.DocClassNm;
        param.RootOID = row.RootOID;
        if (param.RootOID != param.FromOID) {
            param.TaskOID = row.FromOID;
        }
        param.FromOID = row.ToOID;

        OpenSearchReliabilityReportDialog(function () {
            RequestData("/Pms/SelPmsDocumentClassification", { RootOID: param.RootOID, FromOID: @ViewBag.OID }, function (res) {
                PrintJqxTreeGrid(row$.source, row$.obj$, res);
                row$.obj$.jqxTreeGrid('expandAll');
            });
        }, null, param, '/Pms/dlgSearchReliabilityReport', '신뢰성 시험 결과서');
    }
</script>