@{
    Layout = null;
}

<div class="dashboardTop clearfix">
    <div>
        <p>내 작업<span>@ViewBag.PmMyTask</span></p>
        <p style="color:#f00;" id="spPmDelayTask">내 지연작업<span>@ViewBag.PmMyDelayTask</span></p>
        <button class="btnPmClick" data-info="PmDashboardMyTask" data-title="내 작업">+</button>
    </div>
    <div>
        <p>내 프로젝트<span>@ViewBag.PmMyProjectTask</span></p>
        <button class="btnPmClick" data-info="PmDashboardMyProject" data-title="내 프로젝트">+</button>
    </div>
    <div>
        <p>결재중 작업<span>@ViewBag.PmMyApprovTask</span></p>
        <button class="btnPmClick" data-info="PmDashboardMyApprovTask" data-title="결재중 작업">+</button>
    </div>
    <div>
        <p>산출물<span>@ViewBag.PmMyDelivery</span></p>
        <button class="btnPmClick" data-info="PmDashboardMyDelivery" data-title="산출물">+</button>
    </div>
    <div>
        <p>이슈<span>@ViewBag.PmMyIssue</span></p>
        <button class="btnPmClick" data-info="PmDashboardMyIssue" data-title="이슈">+</button>
    </div>
    <div>
        <p>DV 현황<span>@ViewBag.PmMyDvStatus</span></p>
        <button class="btnPmClick" data-info="PmDashboardMyDvStatus" data-title="DV 현황">+</button>
    </div>
    <div>
        <p>PV 현황<span>@ViewBag.PmMyPvStatus</span></p>
        <button class="btnPmClick" data-info="PmDashboardMyPvStatus" data-title="PV 현황">+</button>
    </div>
</div>

<div class="dashboardGraphs clearfix">
    <div style="width:100%;">
        <div class="graphH">
            프로젝트 진행 상태
            <div class="pmDsbdLegend">
                <div class="timelineLegend"><div></div> 현재</div>
                @*<div class="dashboardStatusSelBox"></div>*@
            </div>
        </div>
        <div class="pmProjectList">
            <div id="pmProjectTimeline">
            </div>
        </div>
    </div>

</div>

<div class="dashboardGrids clearfix">
    <div>
        <div class="graphH">
            <i></i> 예정작업
            @*<button>+</button>*@
        </div>
        <div id="pmScheduleList"></div>
    </div>
    <div>
        <div class="graphH">
            상세지연현황
            @*<button>+</button>*@
        </div>
        <div id="pmDelayList"></div>
    </div>
</div>


<script src="~/Resource/Base/d3.min.js"></script>
<script src="~/Resource/Base/d3-tip.min.js"></script>
<script src="~/Resource/d3-timeline-master/dist/timeline-chart_custom.js"></script>

<script type="text/javascript">
    var pmCarType;
    var pmItem;
    var pmProject;
    $(function () {

        var projList =  @Html.Raw(Json.Encode(ViewBag.PmMyProjectStatus));
        projList.unshift({ 'OID': '', 'Name': '' });
        @*
        var dashboardProjSource =
        {
            localdata: projList,
            datatype: "json",
            datafields:
                [
                    { name: 'OID', type: 'int' },
                    { name: 'Name', type: 'string' },
                    { name: 'StatusNm', type: 'string' },
                ]
        };
        var dashboardProjAdapter = new $.jqx.dataAdapter(dashboardProjSource);
        $('.dashboardStatusSelBox').jqxComboBox({ width: 110, height: 32, });
        $('.dashboardStatusSelBox').jqxComboBox({ source: dashboardProjAdapter, displayMember: "StatusNm", valueMember: "OID" });
        $('.dashboardStatusSelBox').find('input, textarea, select').attr('disabled', 'disabled');
        $('.dashboardStatusSelBox').on('change', function () {
            console.log($('.dashboardStatusSelBox').val());
            PmTimelineChart($('.dashboardStatusSelBox').val());
        });
        *@
        var taskSource = {
            datatype: 'Array',
            dafafields: [
                { name: 'OID', type: 'number' },
                { name: 'Name', type: 'string' },
                { name: 'RootNm', type: 'string' },
                { name: 'No', type: 'string' },
                { name: 'EstDuration', type: 'number' },
                { name: 'EstStartDt', type: 'date' },
                { name: 'EstEndDt', type: 'date' },
                { name: 'Delay', type: 'number' },
                { name: 'Car_Lib_OID', type: 'number' },
                { name: 'RootOID', type: 'number' },
                { name: 'ITEM_No', type: 'number' },
            ],
        }

        $('#pmScheduleList').jqxGrid({
            width: '100%',
            height: 300,
            editable: false,
            columnsHeight: 44,
            columnsresize: true,
            columns: [
                {
                    text: 'NO', width: "5%", cellsalign: 'center', columntype: 'number', align: 'center',
                    cellsrenderer: function (row, column, value) {
                        return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:1.9;'>" + (value + 1) + "</div>";
                    }
                },
                { text: '프로젝트명', width: '22%', datafield: 'RootNm', align: 'center', cellsalign: 'center', },
                { text: '작업명(Task)', width: '25%', datafield: 'Name', align: 'center', cellsalign: 'center', },
                { text: '예상기간', width: '10%', datafield: 'EstDuration', align: 'center', cellsalign: 'center', },
                {
                    text: '예상시작일', width: '14%', datafield: 'EstStartDt', align: 'center', cellsalign: 'center', cellsFormat: 'yyyy-MM-dd',
                    cellsrenderer: function (row, columnfield, value, defaulthtml, columnproperties) {
                        if (value == '') {
                            return '';
                        }
                        return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:35px;'>" + moment(value).format('YYYY-MM-DD') + "</div>";
                    }
                },
                {
                    text: '예상완료일', width: '14%', datafield: 'EstEndDt', align: 'center', cellsalign: 'center', cellsFormat: 'yyyy-MM-dd',
                    cellsrenderer: function (row, columnfield, value, defaulthtml, columnproperties) {
                        if (value == '') {
                            return '';
                        }
                        return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:35px;'>" + moment(value).format('YYYY-MM-DD') + "</div>";
                    }
                },
                { text: '기간', width: '10%', datafield: 'Delay', align: 'center', cellsalign: 'center', },
            ]
        });

        $('#pmDelayList').jqxGrid({
            width: '100%',
            height: 300,
            editable: false,
            showtoolbar: true,
            toolbarheight: 44,
            columnsresize: true,
            rendertoolbar: function (statusbar) {
                statusbar.empty();
                var container = $("<div class='lGridComponent'></div>");

                 pmCarType = $("<div></div>").jqxComboBox({ width: 150, height: 32,});
                 pmItem = $("<div></div>").jqxComboBox({ width: 150, height: 32 });
                pmProject = $("<div></div>").jqxComboBox({ width: 150, height: 32 });
                pmCarType.find('input, textarea, select').attr('disabled', 'disabled');
                pmItem.find('input, textarea, select').attr('disabled', 'disabled');
                pmProject.find('input, textarea, select').attr('disabled', 'disabled');
                var delay = $("<input type='number' placeholder='지연일수'>");
                var btnSearch = $("<button class='custom-button'><i class='fas fa-search'></i> 검색</button>");
                var btnExport = $("<button class='custom-button'>Excel Export</button>");

                container.append(pmCarType);
                container.append(pmItem);
                container.append(delay);
                container.append(pmProject);
                container.append(btnSearch);
                container.append(btnExport);
                statusbar.append(container);

                btnSearch.on('click', function () {
                    $('#pmDelayList').jqxGrid('clearfilters');
                    var selCar = pmCarType.val();
                    var selItem = pmItem.val();
                    var selProj = pmProject.val();
                    var selDelay = delay.val();
                    var filtertype = 'numericfilter';
                    var filtergroup = new $.jqx.filter();
                    var filtercondition = 'equal';
                    var filter_or_operator = 1;
                    if (selCar != "" && selCar != null) {
                        var filter1 = filtergroup.createfilter(filtertype, selCar, filtercondition);
                        filtergroup.addfilter(filter_or_operator, filter1);
                        $("#pmDelayList").jqxGrid('addfilter', 'Car_Lib_OID', filtergroup);
                    }
                    if (selItem != "" && selItem != null) {
                        var filter2 = filtergroup.createfilter(filtertype, selItem, filtercondition);
                        filtergroup.addfilter(filter_or_operator, filter2);
                        $("#pmDelayList").jqxGrid('addfilter', 'ITEM_No', filtergroup);
                    }
                    if (selProj != "" && selProj != null) {
                        var filter3 = filtergroup.createfilter(filtertype, selProj, filtercondition);
                        filtergroup.addfilter(filter_or_operator, filter3);
                        $("#pmDelayList").jqxGrid('addfilter', 'RootOID', filtergroup);
                    }
                    if (selDelay != "" && selDelay != null) {
                        var filter4 = filtergroup.createfilter(filtertype, selDelay, 'LESS_THAN_OR_EQUAL');
                        filtergroup.addfilter(filter_or_operator, filter4);
                        $("#pmDelayList").jqxGrid('addfilter', 'Delay', filtergroup);
                    }
                    $("#pmDelayList").jqxGrid('applyfilters');
                });
                btnExport.on('click', function () {
                    var rows = $("#pmDelayList").jqxGrid('getrows');
                    for (var i = 0; i < rows.length; i++) {
                        rows[i].NO = i + 1;
                        rows[i].EstStartDt = moment(rows[i].EstStartDt).format('YYYY-MM-DD');
                        rows[i].EstEndDt = moment(rows[i].EstEndDt).format('YYYY-MM-DD');
                    }
                    console.log(rows);
                    $("#pmDelayList").jqxGrid('exportdata', 'xls', '상세지연현황', true, rows);
                });
            },
            columns: [
                {
                    text: 'NO', width: "5%", cellsalign: 'center', datafield: 'NO', columntype: 'number', align: 'center',
                    cellsrenderer: function (row, column, value) {
                        return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:1.9;'>" + (value + 1) + "</div>";
                    }
                },
                { text: '프로젝트명', width: '21%', datafield: 'RootNm', align: 'center', cellsalign: 'center', },
                { text: '작업 NO', width: '8%', datafield: 'No', align: 'center', cellsalign: 'center', },
                { text: '작업명(Task)', width: '22%', datafield: 'Name', align: 'center', cellsalign: 'center', },
                {
                    text: '예상시작일', width: '17%', datafield: 'EstStartDt', align: 'center', cellsalign: 'center', cellsFormat: 'yyyy-MM-dd',
                    cellsrenderer: function (row, columnfield, value, defaulthtml, columnproperties) {
                        if (value == '') {
                            return '';
                        }
                        return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:35px;'>" + moment(value).format('YYYY-MM-DD') + "</div>";
                    }
                },
                {
                    text: '예상완료일', width: '17%', datafield: 'EstEndDt', align: 'center', cellsalign: 'center', cellsFormat: 'yyyy-MM-dd',
                    cellsrenderer: function (row, columnfield, value, defaulthtml, columnproperties) {
                        if (value == '') {
                            return '';
                        }
                        return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:35px;'>" + moment(value).format('YYYY-MM-DD') + "</div>";
                    }
                },
                { text: '지연일수', width: '10%', datafield: 'Delay', align: 'center', cellsalign: 'center', },
                { text: '차', width: '10%', datafield: 'Car_Lib_OID', align: 'center', cellsalign: 'center',hidden:true, },
                { text: '프로젝트', width: '10%', datafield: 'RootOID', align: 'center', cellsalign: 'center', hidden: true,},
                { text: 'item', width: '10%', datafield: 'ITEM_No', align: 'center', cellsalign: 'center', hidden: true, },
            ],


        });

        RequestData("/Pms/PmDashboardPrepareTaskList", {}, function (res) {
            PrintJqxGrid(taskSource, $('#pmScheduleList'), res);
        });

        RequestData("/Pms/PmDashboardDelayTaskList", {}, function (res) {
              var carSource =
                {
                    localdata: res.carList,
                    datatype: "json",
                    datafields:
                        [
                            { name: 'OID', type: 'number' },
                            { name: 'Name', type: 'string' },
                        ]
                };
                var carAdapter = new $.jqx.dataAdapter(carSource);
            pmCarType.jqxComboBox({ source: carAdapter, displayMember: "Name", valueMember: "OID" });
            var itemSource =
            {
                localdata: res.itemList,
                datatype: "json",
                datafields:
                    [
                        { name: 'OID', type: 'number' },
                        { name: 'Name', type: 'string' },
                    ]
            };
            var itemAdapter = new $.jqx.dataAdapter(itemSource);
            pmItem.jqxComboBox({ source: itemAdapter, displayMember: "Name", valueMember: "OID" });
            var projSource =
            {
                localdata: res.projList,
                datatype: "json",
                datafields:
                    [
                        { name: 'OID', type: 'number' },
                        { name: 'Name', type: 'string' },
                    ]
            };
            var projAdapter = new $.jqx.dataAdapter(projSource);
            pmProject.jqxComboBox({ source: projAdapter, displayMember: "Name", valueMember: "OID" });
            PrintJqxGrid(taskSource, $('#pmDelayList'), res.Result);
        });

        $('.btnPmClick').on('click', function () {
            var info = this.getAttribute('data-info');
            var title = this.getAttribute('data-title');
            var url = '/Pms/' + info;
            if (info == 'PmDashboardMyTask') {
                OpenDashboardPageDialog(null, null, { 'linker': '@Common.Constant.PmsConstant.ROLE_PM' }, url, title);
            } else {
                OpenDashboardDefaultPageDialog(null, null, { 'linker': '@Common.Constant.PmsConstant.ROLE_PM' }, url, title);
            }
        });


        //프로젝트 진행 상태 Timeline Chart
        var timelineData = [];
        var timelineHeight = 20 + timelineData.length * 60;
        $('#pmProjectTimeline').css('height', timelineHeight);
        const timelineBox$ = document.querySelector('#pmProjectTimeline');

        var timeline = new TimelineChart(timelineBox$, timelineData, {
            enableLiveTimer: false,
            intervalMinWidth: 100,
            hideGroupLabels: false,
            tip: function (d) {
                var Syear = d.from.getFullYear();
                var Smonth = d.from.getMonth() + 1;
                var Sdate = d.from.getDate();
                var Fyear = d.to.getFullYear();
                var Fmonth = d.to.getMonth() + 1;
                var Fdate = d.to.getDate();

                //console.log(d);
                //return d.at || `${d.from}<br>${d.to}`;
                //return `${Syear}.${Smonth}.${Sdate} - ${Fyear}.${Fmonth}.${Fdate}`;
                return Syear + '.' + Smonth + '.' + Sdate + '-' + Fyear + '.' + Fmonth + '.' + Fdate;
            }
        }).onVizChange(function (e) {
            //console.log(e);
        });

        document.querySelector('.pmProjectList').addEventListener('scroll', function () {
            let scrollY = this.scrollTop;
            const rect = document.querySelector('rect.chart-bounds');
            const g = document.querySelector('g.axis');
            const rect2 = document.querySelector('rect.delay-box');
            const delay = document.querySelector('text.delay-axis');
            var rectY = scrollY - 31;

            rect.setAttribute('y', rectY);
            rect2.setAttribute('y', rectY);
            g.setAttribute('transform', 'translate(0,' + scrollY + ')');
            delay.setAttribute('transform', 'translate(0,' + scrollY + ')');
        });

        PmTimelineChart(null);

        function PmTimelineChart(BPolicyOID) {
            RequestData('/Pms/PmTimelineChart', { BPolicyOID: BPolicyOID}, function (res) {
                console.log(res);
                _.each(res, function (item) {
                    _.each(item.data, function (innerItem) {
                        if (innerItem.type == 'point') {
                            innerItem.type = TimelineChart.TYPE.POINT;
                            innerItem.at = moment(innerItem.at).toDate();
                        } else {
                            innerItem.type = TimelineChart.TYPE.INTERVAL;
                            innerItem.from = moment(innerItem.from).toDate();
                            innerItem.to = moment(innerItem.to).toDate();
                        }
                    });
                });

                timelineData = res;
                timelineHeight = 30 + timelineData.length * 50;
                $('#pmProjectTimeline').css('height', timelineHeight);
                timelineBox$.innerHTML = '';
                timeline = new TimelineChart(timelineBox$, timelineData, {
                    enableLiveTimer: true,
                    intervalMinWidth: 100,
                    hideGroupLabels: false,
                    tip: function (d) {
                        if ('at' in d) {
                        } else {
                            var Syear = d.from.getFullYear();
                            var Smonth = d.from.getMonth() + 1;
                            var Sdate = d.from.getDate();
                            var Fyear = d.to.getFullYear();
                            var Fmonth = d.to.getMonth() + 1;
                            var Fdate = d.to.getDate();
                            var tipContent = Syear + '.' + Smonth + '.' + Sdate + '-' + Fyear + '.' + Fmonth + '.' + Fdate;
                            return tipContent;
                        }
                        //return d.at || `${d.from}<br>${d.to}`;
                    }
                }).onVizChange(function (e) {
                    //console.log(e);
                }).ondbClickEvent(function (e) {
                    OpenDashboardPageDialog(null, null, { 'ProjectOID': e.proj, 'GateOID': e.oid }, '/Pms/PmDashboardTimeLineTask', e.label);
                });
            });
        }
    });

</script>