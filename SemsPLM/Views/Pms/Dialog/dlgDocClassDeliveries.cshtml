
@{
    Layout = null;
}
<div class="searchBox">
    <div class="searchTitle">
        <label><i class="fas fa-folder-open"></i> &nbsp;문서분류체계</label>
    </div>
    <div class="searchContent">
        <div class="searchData">
            <div>분류</div>
            <div>
                <input type="text" class="txtBox" id="dlgDocClassName" />
            </div>
        </div>
        <div class="searchButton">
            <button id="dlgDocClassSearchBtn" class="searchBtn custom-button" onclick=""><i class="fas fa-search"></i> 검색</button>
        </div>
    </div>
</div>
<div id="dlgDocClassSearchGrid"></div>

<script>
    var param = {};
    var selDocClassDialog;
    var TypeDocument = '@Common.Constant.DocumentConstant.TYPE_DOCUMENT';
    var TypeTask = '@Common.Constant.PmsConstant.TYPE_TASK';
    var dlgDocClassSearchSource =
    {
        dataType: "json",
        dataFields: [
            { name: 'OID', type: 'number' },
            { name: 'Name', type: 'string' },

            { name: 'FromOID', type: 'number' },

            { name: 'Classification', type: 'string' },
            { name: 'Code', type: 'string' },
            { name: 'ViewUrl', type: 'string' },
            { name: 'IsUse', type: 'string' },
            { name: 'CreateUsNm', type: 'string' },
            { name: 'CreateUs', type: 'string' },
            { name: 'CreateDt', type: 'date' },
            { name: 'Description', type: 'string' },
            { name: 'IsRequired', type: 'string' },
        ],
        hierarchy:
        {
            keyDataField: { name: 'OID' },
            parentDataField: { name: 'FromOID' }
        },
        id: 'OID',
        addRow: function (rowID, rowData, IsUse, parentID, commit) {
            commit(true);
        },
    };

    var dlgDocClassSearchGrid$ = $('#dlgDocClassSearchGrid');
    dlgDocClassSearchGrid$.jqxTreeGrid({
        width: "100%",
        height: 590,
        theme: "kdnc",
        checkboxes: function (rowKey, dataRow) {
            var IsRequired = dataRow.IsRequired;
            if (IsRequired == "Y") {
                return false;
            }
            return true;
        },
        sortable: true,
        columns: [
            {
                text: '분류', datafield: 'Name', width: "100%", align: 'center', cellsalign: 'left',
                cellsRenderer: function (row, dataField, cellValue, rowData, cellText) {
                    if (rowData.IsRequired == "Y") {
                        return cellValue + ' <i class="fas fa-lock"></i>';
                    } else {
                        return cellValue;
                    }
                }
            }
        ],
        editable: false,
        showToolbar: true,
        toolbarHeight: 45,
        renderToolbar: function (toolbar) {
            toolbar.empty();
            var container = $("<div class='lGridComponent'></div>");
            var btnAdd = $("<button id=''><i class='fas fa-plus'></i> 선택</button>").jqxButton();
            container.append(btnAdd);
            toolbar.append(container);

            btnAdd.on('click', function () {
                if ('@ViewBag.Detail.Type' != '@Common.Constant.DocumentConstant.TYPE_DOCUMENT') {

                    var selectedRecords = new Array();
                    var checkedRows = dlgDocClassSearchGrid$.jqxTreeGrid('getCheckedRows');
                    for (var i = 0; i < checkedRows.length; i++) {
                        console.log(checkedRows[i]);
                        var param = {};
                        param.RootOID = selDocClassDialog.Data.RootOID;
                        param.FromOID = selDocClassDialog.Data.FromOID;
                        param.ToOID = checkedRows[i].OID;
                        selectedRecords[selectedRecords.length] = param;
                    }
                    if (selectedRecords.length == 0) {
                        alert("문서가 선택이 되지 않았습니다");
                        return false;
                    }
                    RequestData("/Pms/InsProjectDocumentClassification", selectedRecords, function (res) {
                        selDocClassDialog.CallBackFunction();
                        selDocClassDialog.close();
                        selDocClassDialog = null;
                    });

                } else {
                    var selectedRecords = new Array();
                    var checkedRows = dlgDocClassSearchGrid$.jqxTreeGrid('getCheckedRows');
                    if (checkedRows.length == 0) {
                        alert("문서가 선택이 되지 않았습니다");
                        return false;
                    }
                    if (checkedRows.length > 1) {
                        alert("하나의 문서만 선택하여주세요.");
                        return false;
                    }
                    parent.docClassOID.val(checkedRows[0].OID);
                    parent.docClassName.val(checkedRows[0].Name);
                    selDocClassDialog.close();
                    selDocClassDialog = null;
                }
            });
        }
    });


    GetDocClassList();

    $('#dlgDocClassSearchBtn').on('click', function () {
        param = {};
        param.Name = $('#dlgDocClassName').val();
        param.Type = '@ViewBag.Detail.Type';

        RequestData("/Manage/SelProjectDocumentClassification", param, function (res) {
            PrintJqxTreeGrid(dlgDocClassSearchSource, dlgDocClassSearchGrid$, res);
            dlgDocClassSearchGrid$.jqxTreeGrid('expandAll');
        });
    });

    $('#dlgDocClassName').keydown(function (key) {
        if (key.keyCode == 13) {
            $('#dlgDocClassSearchBtn').trigger('click');
        }
    });

    function GetDocClassList() {
        param.Name = $('#dlgDocClassName').val();
        param.Type = '@ViewBag.Detail.Type';
        RequestData("/Manage/SelProjectDocumentClassification", param, function (res) {
            PrintJqxTreeGrid(dlgDocClassSearchSource, dlgDocClassSearchGrid$, res);
            dlgDocClassSearchGrid$.jqxTreeGrid('expandAll');
        });
    }

</script>