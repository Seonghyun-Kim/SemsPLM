@{
    Layout = null;
}
<div class="dashboardTop clearfix">
    <div>
        <p>내 작업<span>@ViewBag.PmMyTask</span></p>
        <p style="color:#f00;">내 지연작업<span>@ViewBag.PmMyDelayTask</span></p>
        <button class="btnPsClick" data-info="PmDashboardMyTask" data-title="내 작업">+</button>
    </div>
    <div>
        <p>내 프로젝트<span>@ViewBag.PmMyProjectTask</span></p>
        <button class="btnPsClick" data-info="PmDashboardMyProject" data-title="내 프로젝트">+</button>
    </div>
    <div>
        <p>결재중 작업<span>@ViewBag.PmMyApprovTask</span></p>
        <button class="btnPsClick" data-info="PmDashboardMyApprovTask" data-title="결재중 작업">+</button>
    </div>
    <div>
        <p>산출물<span>@ViewBag.PmMyDelivery</span></p>
        <button class="btnPsClick" data-info="PmDashboardMyDelivery" data-title="산출물">+</button>
    </div>
    <div>
        <p>이슈<span>@ViewBag.PmMyIssue</span></p>
        <button class="btnPsClick" data-info="PmDashboardMyIssue" data-title="이슈">+</button>
    </div>
    <div>
        <p>DV 현황<span>@ViewBag.PmMyDvStatus</span></p>
        <button class="btnPsClick" data-info="PmDashboardMyDvStatus" data-title="DV 현황">+</button>
    </div>
    <div>
        <p>PV 현황<span>@ViewBag.PmMyPvStatus</span></p>
        <button class="btnPsClick" data-info="PmDashboardMyPvStatus" data-title="PV 현황">+</button>
    </div>
</div>

    <div class="dashboardGraphs clearfix">
        <div class="piechart">
            <div class="graphH">
                프로젝트별 작업진행 상태
                <div class="dashboardSelBox" id="totalTaskForChartSelBox"></div>
            </div>
            <div class="chartTotal">작업 총
                <div id="totalTaskForChart"></div>
            </div>
            <div id="personalTaskRate" style="margin-left:10px;"></div>
        </div>
        <div class="piechart">
            <div class="graphH">
                <ul class="issueDVPVLabel" id="piechart_label">
                    <li data="issue">이슈</li>
                    <li data="DV">DV현황</li>
                    <li data="PV">PV현황</li>
                </ul>
                <div class="dashboardSelBox" id="totalIssueForChartSelBox"></div>
            </div>
            <div class="chartTotal">이슈 총
                <div id="totalIssueForChart"></div>    
            </div>
            <div id="personalIssueRate" style="margin-left:10px;"></div>
        </div>
        <div class="barchart">
            <div class="graphH">
                프로젝트별 작업진행 상태
                <span style="float:right;">Total : <span id="totalTasks"></span></span>
            </div>
            <div id="personalTaskChart"></div>
        </div>
        <div class="barchart">
            <div class="graphH">
                <ul class="issueDVPVLabel" id="barchart_label">
                    <li data="issue">이슈</li>
                    <li data="DV">DV현황</li>
                    <li data="PV">PV현황</li>
                </ul>
                <span style="float:right;">Total : <span id="totalIssues"></span></span>
            </div>
            <div id="personalIssueChart"></div>
        </div>
    </div>

    <div class="dashboardGrids clearfix">
        <div>
            <div class="graphH">
                예정작업
                @*<button>+</button>*@
            </div>
            <div id="personalScheduleList"></div>
        </div>
        <div>
            <div class="graphH">
                상세지연현황
                @*<button>+</button>*@
            </div>
            <div id="personalDelayList"></div>
        </div>
    </div>
    <script type="text/javascript">
        var peCarType;
        var peItem;
        var peProject;
        var totalIssueForChartParam = {};
        totalIssueForChartParam.Type = 'issue';
        $(function () {
            
            var projList =  @Html.Raw(Json.Encode(ViewBag.PmMyProjectInfo));
            projList.unshift({ 'OID': '', 'Name': '' });
            var dashboardProjSource =
            {
                localdata: projList,
                datatype: "json",
                datafields:
                    [
                        { name: 'OID', type: 'int' },
                        { name: 'Name', type: 'string' }
                    ]
            };
            var dashboardProjAdapter = new $.jqx.dataAdapter(dashboardProjSource);
            $('.dashboardSelBox').jqxComboBox({ width: 120, height: 32, });
            $('.dashboardSelBox').jqxComboBox({ source: dashboardProjAdapter, displayMember: "Name", valueMember: "OID" });
            $('.dashboardSelBox').find('input, textarea, select').attr('disabled', 'disabled');
            //차트
            $('#totalTaskForChartSelBox').on('change', function () {
               callProjectTask($('#totalTaskForChartSelBox').val());
            });
            $('#totalIssueForChartSelBox').on('change', function () {
                totalIssueForChartParam.OID = $('#totalIssueForChartSelBox').val();
                callIssueDVPV(totalIssueForChartParam);
            });

            //이슈DVPV구분
            $('.issueDVPVLabel').find('[data="issue"]').addClass('activeLabel');
            $('.issueDVPVLabel > li').click(function () {
                $(this).siblings().removeClass('activeLabel');
                $(this).addClass('activeLabel');
            });

            $('#piechart_label > li').click(function () {
                var type = $(this).attr('data');
                totalIssueForChartParam.Type = type;
                callIssueDVPV(totalIssueForChartParam);
            });

            $('#barchart_label > li').click(function () {
                var type = $(this).attr('data');
                callProjectIssueDVPV(type);
            });

            //프로젝트별 작업진행 상태 donutchart
            var taskRatePersonData = [0,0,0,0];
            var taskRatePersonLabels = ['준비', '진행', '지연', '완료'];
            var taskRatePersonDonutSetting = {
                series: taskRatePersonData,
                chart: {
                    type: 'donut',
                    width: 360,
                },
                legend: {
                    position: 'bottom',
                    horizontalAlign: 'center',
                    floating: false,
                },
                colors: ['#d9d9d9', '#00f','#f00','#9f9'],
                //colors:['rgb(0,143,251)', 'rgb(244,67,54)', 'rgb(254,176,25)', 'rgb(0,227,150)'],
                labels:taskRatePersonLabels,
                responsive: [{
                    breakpoint: 480,
                }]
            }
            var taskRatePersonDonut = new ApexCharts(document.querySelector('#personalTaskRate'), taskRatePersonDonutSetting);
            taskRatePersonDonut.render();

            function callProjectTask(param) {
                RequestData('/Pms/CallProjectTask', {OID:param}, function (res) {
                    taskRatePersonData = res;
                    taskRatePersonDonut.updateSeries(res);
                    const totalTaskBox$ = $('#totalTaskForChart');
                    const reducer = function (accumulator, currentValue) {
                        return accumulator + currentValue;
                    }

                    totalTaskBox$.empty();
                    var donutTaskTotal = taskRatePersonData.reduce(reducer);
                    totalTaskBox$.append(donutTaskTotal);
                });
            }
                
            //이슈,DV,PV donutchart
            var issuePersonData = [0,0,0];
            var issuePersonLabels = ['진행', '지연', '완료'];

            var issuePersonDonutSetting = {
                series: issuePersonData,
                labels: issuePersonLabels,
                chart: {
                    type: 'donut',
                    width: 360,
                },
                legend: {
                    position: 'bottom',
                    horizontalAlign: 'center',
                    floating: false,
                },
                colors: ['#00f','#f00','#9f9'],
                //colors: ['rgb(0,227,150)', 'rgb(0,143,251)', 'rgb(244,67,54)'],
                responsive: [{
                    breakpoint: 480,
                }]
            }
            var issuePersonDonut = new ApexCharts(document.querySelector('#personalIssueRate'), issuePersonDonutSetting);
            issuePersonDonut.render();

            function callIssueDVPV(param) {
                RequestData('/Pms/CallIssueDVPV',param, function (res) {
                    issuePersonData = res;
                    issuePersonDonut.updateSeries(res);
                  
                    const totalIssueBox$ = $('#totalIssueForChart');
                    const reducer = function (accumulator, currentValue) {
                        return accumulator + currentValue;
                    }
                    totalIssueBox$.empty();
                    var donutIssueTotal = issuePersonData.reduce(reducer);
                    totalIssueBox$.append(donutIssueTotal);
                });
            }

            //프로젝트별 작업진행 상태 barchart
            var dsbdPersonTaskList = [];
            var dsbdPersonTaskChartSample = [];

            var dsbdPersonTaskChartSetting = {
                series: dsbdPersonTaskChartSample,
                chart: {
                    type: 'bar',
                    height: 270,
                    zoom: {
                        enabled:true,
                    },
                    toolbar: {
                        show: true,
                        tools: {
                            download: true,
                            selection: true,
                            zoom: true,
                            zoomin: true,
                            zoomout: true,
                            pan: true,
                            reset: true,
                        },
                        autoSelected: 'pan'
                    }
                },
                colors: ['#d9d9d9', '#00f', '#f00', '#9f9'],
                //colors:['rgb(0,143,251)', 'rgb(244,67,54)', 'rgb(254,176,25)', 'rgb(0,227,150)'],
                plotOptions: {
                    bar: {
                        horizontal: false,
                        columnWidth: '50%',
                    },
                },
                dataLabels: {
                    enabled:false
                },
                xaxis: {
                    categories:dsbdPersonTaskList,
                    tickPlacement: 'on',
                    labels: {
                        show: true,
                        rotate: 0,
                        rotateAlways: false,
                        hideOverlappingLabels: true,
                    }
                },
                legend: {
                    show: true,
                    position: 'bottom',
                    horizontalAlign:'center',
                },
                grid: {
                    padding: {
                        left: 50,
                        right: 50
                    }
                }
            }

            var dsbdPersonTaskChart = new ApexCharts(document.querySelector('#personalTaskChart'), dsbdPersonTaskChartSetting);
            dsbdPersonTaskChart.render();

            function callProjectTaskInfo() {
                RequestData('/Pms/CallProjectTaskInfo', {}, function (res) {
                    _.each(res.PROJECT, function (item) {
                        dsbdPersonTaskList.push(item);
                    });

                    _.each(res.COUNT, function (item, key) {
                        dsbdPersonTaskChartSample.push({
                            'name': key,
                            'data': item
                        });
                    });

                    dsbdPersonTaskChart.updateOptions({ xaxis: { categories: dsbdPersonTaskList } });
                    dsbdPersonTaskChart.updateSeries(dsbdPersonTaskChartSample);

                    const totalTaskSpan$ = $('#totalTasks');
                    const reducer = function (accumulator, currentValue) {
                        return accumulator + currentValue;
                    }

                    var barTaskDataArr = [];
                    dsbdPersonTaskChartSample.forEach(function (e) {
                        barTaskDataArr.push(e.data.reduce(reducer));
                    });
                    var barTaskTotal = barTaskDataArr.reduce(reducer);
                    totalTaskSpan$.append(barTaskTotal);
                });
            }

            //이슈,DV,PV barchart
            var dsbdPersonIssueChartList = [];
            var dsbdPersonIssueChartSample = [
            ];
            var dsbdPersonIssueChartSetting = {
                series: dsbdPersonIssueChartSample,
                chart: {
                    type: 'bar',
                    height: 270,
                    zoom: {
                        enabled:true,
                    },
                    toolbar: {
                        show: true,
                        tools: {
                            download: true,
                            selection: true,
                            zoom: true,
                            zoomin: true,
                            zoomout: true,
                            pan: true,
                            reset: true,
                        },
                        autoSelected: 'pan'
                    }
                },
                colors:['#00f', '#f00', '#9f9'],
                //colors:['rgb(0,143,251)', 'rgb(244,67,54)', 'rgb(0,227,150)'],
                plotOptions: {
                    bar: {
                        horizontal: false,
                        columnWidth: '50%',
                    },
                },
                dataLabels: {
                    enabled:false
                },
                xaxis: {
                    categories: dsbdPersonIssueChartList,
                    tickPlacement:'on',
                    labels: {
                        show: true,
                        rotate: 0,
                        rotateAlways: false,
                        hideOverlappingLabels: true,
                    }
                },
                legend: {
                    show: true,
                    position: 'bottom',
                    horizontalAlign:'center',
                },
                grid: {
                    padding: {
                        left: 50,
                        right: 50
                    }
                }
            }
            var dsbdPersonIssueChart = new ApexCharts(document.querySelector('#personalIssueChart'), dsbdPersonIssueChartSetting);
            dsbdPersonIssueChart.render();

            function callProjectIssueDVPV(param) {
                dsbdPersonIssueChartList = [];
                dsbdPersonIssueChartSample = [];
                RequestData('/Pms/callProjectIssueDVPV', { _Type: param }, function (res) {
                    _.each(res.PROJECT, function (item) {
                        dsbdPersonIssueChartList.push(item);
                    });

                    _.each(res.COUNT, function (item, key) {
                        dsbdPersonIssueChartSample.push({
                            'name': key,
                            'data': item
                        });
                    });

                    dsbdPersonIssueChart.updateOptions({ xaxis: { categories: dsbdPersonIssueChartList } });
                    dsbdPersonIssueChart.updateSeries(dsbdPersonIssueChartSample);

                    const totalIssueSpan$ = $('#totalIssues');
                    const reducer = function (accumulator, currentValue) {
                        return accumulator + currentValue;
                    }
                    totalIssueSpan$.empty();
                    var barIssueDataArr = [];
                    dsbdPersonIssueChartSample.forEach(function (e) {
                        barIssueDataArr.push(e.data.reduce(reducer));
                    });
                    var barIssueTotal = barIssueDataArr.reduce(reducer);
                    totalIssueSpan$.append(barIssueTotal)

                });
            }

            //예정작업, 상세지연현황
            var taskPersonSource = {
                datatype: 'array',
                dafafields: [
                    { name: 'OID', type: 'number' },
                    { name: 'Name', type: 'string' },
                    { name: 'RootNm', type: 'string' },
                    { name: 'No', type: 'string' },
                    { name: 'EstDuration', type: 'number' },
                    { name: 'EstStartDt', type: 'date' },
                    { name: 'EstEndDt', type: 'date' },
                    { name: 'Delay', type: 'number' },
                    { name: 'Car_Lib_OID', type: 'number' },
                    { name: 'RootOID', type: 'number' },
                    { name: 'ITEM_No', type: 'number' },
                ],
            }

            $('#personalScheduleList').jqxGrid({
                width: '100%',
                height: 300,
                editable: false,
                columnsHeight: 44,
                columnsresize: true,
                columns: [
                    {
                        text: 'NO', width: "5%", cellsalign: 'center', columntype: 'number', align: 'center',
                        cellsrenderer: function (row, column, value) {
                            return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:1.9;'>" + (value + 1) + "</div>";
                        }
                    },
                    { text: '프로젝트명', width: '22%', datafield: 'RootNm', align: 'center', cellsalign: 'center', },
                    { text: '작업명(Task)', width: '25%', datafield: 'Name', align: 'center', cellsalign: 'center', },
                    { text: '예상기간', width: '10%', datafield: 'EstDuration', align: 'center', cellsalign: 'center', },
                    {
                        text: '예상시작일', width: '14%', datafield: 'EstStartDt', align: 'center', cellsalign: 'center', cellsFormat: 'yyyy-MM-dd',
                        cellsrenderer: function (row, columnfield, value, defaulthtml, columnproperties) {
                            if (value == '') {
                                return '';
                            }
                            return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:35px;'>" + moment(value).format('YYYY-MM-DD') + "</div>";
                        }
                    },
                    {
                        text: '예상완료일', width: '14%', datafield: 'EstEndDt', align: 'center', cellsalign: 'center', cellsFormat: 'yyyy-MM-dd',
                        cellsrenderer: function (row, columnfield, value, defaulthtml, columnproperties) {
                            if (value == '') {
                                return '';
                            }
                            return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:35px;'>" + moment(value).format('YYYY-MM-DD') + "</div>";
                        }
                    },
                    { text: '기간', width: '10%', datafield: 'Delay', align: 'center', cellsalign: 'center', },
                ]
            });

            $('#personalDelayList').jqxGrid({
                width: '100%',
                height: 300,
                editable: false,
                showtoolbar: true,
                toolbarheight: 44,
                columnsresize: true,
                rendertoolbar: function (statusbar) {
                    statusbar.empty();
                    var container = $("<div class='lGridComponent'></div>");
                     peCarType = $("<div></div>").jqxComboBox({ width: 150, height: 32 });
                     peItem = $("<div></div>").jqxComboBox({ width: 150, height: 32 });
                    peProject = $("<div></div>").jqxComboBox({ width: 150, height: 32 });
                    peCarType.find('input, textarea, select').attr('disabled', 'disabled');
                    peItem.find('input, textarea, select').attr('disabled', 'disabled');
                    peProject.find('input, textarea, select').attr('disabled', 'disabled');
                    var delay = $("<input type='number' placeholder='지연일수'>");
                    var btnSearch = $("<button class='custom-button'><i class='fas fa-search'></i> 검색</button>");
                    var btnExport = $("<button class='custom-button'>Excel Export</button>");
                    container.append(peCarType);
                    container.append(peItem);
                    container.append(delay);
                    container.append(peProject);
                    container.append(btnSearch);
                    container.append(btnExport);
                    statusbar.append(container);
                    btnSearch.on('click', function () {
                        $('#personalDelayList').jqxGrid('clearfilters');
                        var selCar = peCarType.val();
                        var selItem = peItem.val();
                        var selProj = peProject.val();
                        var selDelay = delay.val();
                        var filtertype = 'numericfilter';
                        var filtergroup = new $.jqx.filter();
                        var filtercondition = 'equal';
                        var filter_or_operator = 1;
                        if (selCar != "" && selCar != null) {
                            var filter1 = filtergroup.createfilter(filtertype, selCar, filtercondition);
                            filtergroup.addfilter(filter_or_operator, filter1);
                            $("#personalDelayList").jqxGrid('addfilter', 'Car_Lib_OID', filtergroup);
                        }
                        if (selItem != "" && selItem != null) {
                            var filter2 = filtergroup.createfilter(filtertype, selItem, filtercondition);
                            filtergroup.addfilter(filter_or_operator, filter2);
                            $("#personalDelayList").jqxGrid('addfilter', 'ITEM_No', filtergroup);
                        }
                        if (selProj != "" && selProj != null) {
                            var filter3 = filtergroup.createfilter(filtertype, selProj, filtercondition);
                            filtergroup.addfilter(filter_or_operator, filter3);
                            $("#personalDelayList").jqxGrid('addfilter', 'RootOID', filtergroup);
                        }
                        if (selDelay != "" && selDelay != null) {
                            var filter4 = filtergroup.createfilter(filtertype, selDelay, 'LESS_THAN_OR_EQUAL');
                            filtergroup.addfilter(filter_or_operator, filter4);
                            $("#personalDelayList").jqxGrid('addfilter', 'Delay', filtergroup);
                        }
                        $("#personalDelayList").jqxGrid('applyfilters');
                    });
                    btnExport.on('click', function () {
                        var rows = $("#personalDelayList").jqxGrid('getrows');
                        for (var i = 0; i < rows.length; i++) {
                            rows[i].NO = i + 1;
                            rows[i].EstStartDt = moment(rows[i].EstStartDt).format('YYYY-MM-DD');
                            rows[i].EstEndDt = moment(rows[i].EstEndDt).format('YYYY-MM-DD');   
                        }
                        console.log(rows);
                        $("#personalDelayList").jqxGrid('exportdata', 'xls','상세지연현황',true,rows);
                    });
                },
                columns: [
                    {
                        text: 'NO', width: "5%", cellsalign: 'center', datafield: 'NO', columntype: 'number', align: 'center',
                        cellsrenderer: function (row, column, value) {
                            return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:1.9;'>" + (value + 1) + "</div>";
                        }
                    },
                    { text: '프로젝트명', width: '21%', datafield: 'RootNm', align: 'center', cellsalign: 'center', },
                    { text: '작업 NO', width: '8%', datafield: 'No', align: 'center', cellsalign: 'center', },
                    { text: '작업명(Task)', width: '22%', datafield: 'Name', align: 'center', cellsalign: 'center', },
                    {
                        text: '예상시작일', width: '17%', datafield: 'EstStartDt', align: 'center', cellsalign: 'center', cellsFormat: 'yyyy-MM-dd',
                        cellsrenderer: function (row, columnfield, value, defaulthtml, columnproperties) {
                            if (value == '') {
                                return '';
                            }
                            return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:35px;'>" + moment(value).format('YYYY-MM-DD') + "</div>";
                        }
                    },
                    {
                        text: '예상완료일', width: '17%', datafield: 'EstEndDt', align: 'center', cellsalign: 'center', cellsFormat: 'yyyy-MM-dd',
                        cellsrenderer: function (row, columnfield, value, defaulthtml, columnproperties) {
                            if (value == '') {
                                return '';
                            }
                            return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:35px;'>" + moment(value).format('YYYY-MM-DD') + "</div>";
                        }
                    },
                    { text: '지연일수', width: '10%', datafield: 'Delay', align: 'center', cellsalign: 'center', },
                    { text: '차', width: '10%', datafield: 'Car_Lib_OID', align: 'center', cellsalign: 'center', hidden: true, },
                    { text: '프로젝트', width: '10%', datafield: 'RootOID', align: 'center', cellsalign: 'center', hidden: true, },
                    { text: 'item', width: '10%', datafield: 'ITEM_No', align: 'center', cellsalign: 'center', hidden: true, },
                ],
            });

            RequestData("/Pms/PersonDashboardPrepareTaskList", {}, function (res) {
                PrintJqxGrid(taskPersonSource, $('#personalScheduleList'), res);
            });

            RequestData("/Pms/PersonDashboardDelayTaskList", {}, function (res) {
                var carSource =
                {
                    localdata: res.carList,
                    datatype: "json",
                    datafields:
                        [
                            { name: 'OID', type: 'number' },
                            { name: 'Name', type: 'string' },
                        ]
                };
                var carAdapter = new $.jqx.dataAdapter(carSource);
                peCarType.jqxComboBox({ source: carAdapter, displayMember: "Name", valueMember: "OID" });
                var itemSource =
                {
                    localdata: res.itemList,
                    datatype: "json",
                    datafields:
                        [
                            { name: 'OID', type: 'number' },
                            { name: 'Name', type: 'string' },
                        ]
                };
                var itemAdapter = new $.jqx.dataAdapter(itemSource);
                peItem.jqxComboBox({ source: itemAdapter, displayMember: "Name", valueMember: "OID" });
                var projSource =
                {
                    localdata: res.projList,
                    datatype: "json",
                    datafields:
                        [
                            { name: 'OID', type: 'number' },
                            { name: 'Name', type: 'string' },
                        ]
                };
                var projAdapter = new $.jqx.dataAdapter(projSource);
                peProject.jqxComboBox({ source: projAdapter, displayMember: "Name", valueMember: "OID" });

                PrintJqxGrid(taskPersonSource, $('#personalDelayList'), res.Result);
            });

            $('.btnPsClick').on('click', function () {
                var info = this.getAttribute('data-info');
                var title = this.getAttribute('data-title');
                var url = '/Pms/' + info;
                if (info == 'PmDashboardMyTask') {
                    OpenDashboardPageDialog(null, null, { 'linker': '@Common.Constant.PmsConstant.ROLE_PE' }, url, title);
                } else {
                    OpenDashboardDefaultPageDialog(null, null, { 'linker': '@Common.Constant.PmsConstant.ROLE_PE' }, url, title);
                }
            });

            callIssueDVPV(totalIssueForChartParam);
            callProjectIssueDVPV('issue');
            callProjectTask(null);
            callProjectTaskInfo();

        });

    </script>
