
@{
    Layout = null;
}
<div id="InfoEPart_@ViewBag.OID" class="info_project clearfix">
    <div class="info_menubar">
        <ul>
            <li class="tab info_focus" info="properties"><i class="fas fa-info-circle"></i> 기본 정보</li>
            <li class="tab" info="Apphis"><i class="fas fa-stream"></i> 결재이력</li>
            <li class="tab" info="Downhis"><i class="fas fa-users"></i> 다운로드 이력</li>
            <li class="tab" info="Reverse"><i class="fas fa-file-medical"></i> 역전개 보기</li>
            <li class="tab" info="Structure"><i class="fas fa-exclamation"></i> EBOM구조</li>
        </ul>
    </div>
    <div class="EPart_content">
        <div class="project_basic clearfix">
            <div class="basic_info">
                <h3>@Model.Name</h3>
                <p>품명 : <span>@Model.Title</span></p>
            </div>
            <div class="basic_image">
                @*
        <div class="ModifiableCustomBox_@ViewBag.OID">
            @if (Model.Thumbnail != null)
            {
                <img class="img-thumbnail" src="@Url.Content("~/images/Thumbnail/")@Model.Thumbnail" style="height:90px;" />
            }
        </div>
                *@
                <div class="ModifiableEditCustomBox_@ViewBag.OID">
                    <input type="file" name="file" multiple="true" id="imageDrag_@ViewBag.OID" style="display:none;">
                    <div class="image_inputbox" id="dropZone_@ViewBag.OID" style="float:left;">이미지</div>
                    <ul class="image_thumbnail" id="uploadResult_@ViewBag.OID" style="float:left;">
                        @if (Model.Thumbnail != null)
                        {
                            <li>
                                <img class="img-thumbnail" src="@Url.Content("~/images/Thumbnail/")@Model.Thumbnail" />
                                <i class="fas fa-window-close"></i>
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <div class="basic_status">
                <div class="pointer_wrap">
                    @for (int i = 0; i < ViewBag.Status.Count; i++)
                    {
                        <div class="pointer" data-type="@ViewBag.Status[i].Type" data-Status="@ViewBag.Status[i].StatusOID" style="z-index: @(ViewBag.Status.Count - i);">
                            <div class="project_status">@ViewBag.Status[i].StatusNm</div>
                        </div>
                    }
                </div>
                <p>설명 : <span></span></p>
            </div>
        </div>


        <div id="properties" class="basic_grid">
            <div class="propertiesInfo">
                <table class="tableTopButtonBox">
                    <tbody>
                        <tr>
                            <td>
                                <h3 style="padding-left:8px;"><i class="fas fa-file-alt"></i> &nbsp;부품 PROFILE</h3>
                            </td>
                            <td style="text-align: right;">
                                <button id="EditBtn_@ViewBag.OID" class="custom-button"><i class="fas fa-edit"></i> 수정</button>
                                <button id="EditSaveBtn_@ViewBag.OID" class="custom-button"><i class="fas fa-check-square"></i> 저장</button>
                                <button id="EditCancelBtn_@ViewBag.OID" class="custom-button"><i class="fas fa-window-close"></i> 취소</button>
                                @*<button id="AppDrwEditBtn_@ViewBag.OID" class="custom-button"><i class="fas fa-highlighter"></i> 승인도면정정</button>
                                <button id="ReverseEditBtn_@ViewBag.OID" class="custom-button"><i class="fas fa-eraser"></i> 역전개 수정</button>*@
                            </td>
                        </tr>
                    </tbody>
                </table>

                <table class="infoTable">
                    <colgroup>
                        <col style="width:12%;" />
                        <col style="width:auto;" />
                        <col style="width:12%;" />
                        <col style="width:auto;" />
                        <col style="width:12%;" />
                        <col style="width:auto;" />
                    </colgroup>
                    <tr>
                        <th>도면/부품번호</th>
                        <td>
                            <input type="text" id="" value="@Model.Name" />
                        </td>
                        <th>리비전</th>
                        <td><input type="text" id="" value="@Model.Revision" /></td>
                        <th>구분</th>
                        <td>
                            <input type="text" id="InfoEPartDivision_@Model.OID" value=""  />
                        </td>
                    </tr>

                    <!--조립도-->
                    <tr class="DivisionAssemblyDrawing_@Model.OID">
                        <th>ITEM_NO</th>
                        <td>
                            <input type="text" id="" value="@Model.ITEM_NoNm" />
                        </td>
                        <th>ITEM_Middle</th>
                        <td>
                            <input type="text" id="" value="@Model.ITEM_MiddleNm" />
                        </td>
                        <th>생산지</th>
                        <td>
                            <input type="text" id="" value="@Model.Production_PlaceNm" />
                        </td>
                    </tr>
                    <tr class="DivisionAssemblyDrawing_@Model.OID">
                        <th>제품구분</th>
                        <td>
                            <input type="text" id="" value="@Model.EPartTypeNm" />
                        </td>
                        <th>BLOCK NO</th>
                        <td>
                            <input type="text" id="" value="@Model.Block_NoNm" />
                        </td>
                        <th>차종</th>
                        <td>
                            <input type="text" id="" value="@Model.Car_Lib_Nm" />
                        </td>
                    </tr>
                    <tr class="DivisionAssemblyDrawing_@Model.OID">
                        <th>시리얼</th>
                        <td>
                            <input type="text" id="" value="@Model.Serial" />
                        </td>
                        <th>고객리비전</th>
                        <td colspan="3">
                            <input type="text" id="" value="@Model.Sel_Revision" />
                        </td>
                    </tr>

                    <!--단품도-->
                    <tr class="DivisionSingleDrawing_@Model.OID">
                        <th>재질</th>
                        <td>
                            <input type="text" id="" value="@Model.Material_Nm" />
                        </td>
                        <th>BLOCK NO</th>
                        <td>
                            <input type="text" id="" value="@Model.Block_NoNm" />
                        </td>
                        <th>ITEM_NO</th>
                        <td>
                            <input type="text" id="" value="@Model.ITEM_NoNm" />
                        </td>
                    </tr>
                    <tr class="DivisionSingleDrawing_@Model.OID">
                        <th>차종</th>
                        <td>
                            <input type="text" id="" value="@Model.Car_Lib_Nm" />
                        </td>
                        <th>시리얼</th>
                        <td>
                            <input type="text" id="" value="@Model.Serial" />
                        </td>
                        <th>고객리비전</th>
                        <td>
                            <input type="text" id="" value="@Model.Sel_Revision" />
                        </td>
                    </tr>

                    <!--스탠다드-->
                    <tr class="DivisionStandard_@Model.OID">
                        <th>재질</th>
                        <td>
                            <input type="text" id="" value="@Model.Material_Nm" />
                        </td>
                        <th>BLOCK NO</th>
                        <td>
                            <input type="text" id="" value="@Model.Block_NoNm" />
                        </td>
                        <th>시리얼</th>
                        <td>
                            <input type="text" id="" value="@Model.Serial" />
                        </td>
                    </tr>

                    <tr>
                        <th>세부사양</th>
                        <td colspan="5">
                            <textarea id="" style="border:1px solid #59a3d5; height:150px; width:100%">@Model.Description</textarea>
                        </td>
                    </tr>
                    <tr>
                        <th>작성일</th>
                        <td>
                            <input type="text" value="@Model.CreateDt" readonly="readonly" />
                        </td>
                        <th>작성자</th>
                        <td>
                            <input type="text" value="@Model.CreateUs" readonly="readonly">
                        </td>
                        <th>상태</th>
                        <td>
                            <input type="text" value="@Model.BPolicy.StatusNm" readonly="readonly" />
                        </td>
                    </tr>
                    <tr>
                        <th>정정일</th>
                        <td>
                            <input type="text" readonly="readonly" />
                        </td>
                        <th>정정자</th>
                        <td>
                            <input type="text" readonly="readonly">
                        </td>
                        <th></th>
                        <td>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div id="Apphis" class="basic_grid dective">
            <div id="ApphisInfo_@ViewBag.OID">
            </div>
        </div>

        <div id="Downhis" class="basic_grid dective">
            <div id="DownhisInfo_@ViewBag.OID">
            </div>
        </div>

        <div id="Reverse" class="basic_grid dective">
            <div id="ReverseInfo_@ViewBag.OID"></div>
        </div>

        <div id="Structure" class="basic_grid dective">
            <div id="StructureInfo_@ViewBag.OID"></div>
        </div>
    </div>
</div>
<script>
    $(function () {
        const EPartOID = '@ViewBag.OID';
        const EPartNm = '@Model.Name';
        const EPartDiv$ = $('#InfoEPart_' + EPartOID);
        const screenWidth = $('.EPart_content').width();
        const screenHeight = $('.EPart_content').height() - 152;

        const current = @Model.BPolicyOID;
        const headerStatus = $('#InfoEPart_' + EPartOID + ' .pointer_wrap .pointer');

        var rowKey = null;
        var newRowID = null;

        const EBomParam = {};

        //var InfoEPartDivision;
        InfoEPartDivision$ = $('#InfoEPartDivision_' + EPartOID);
        if ("@Model.Division" == "@Common.Constant.EBomConstant.DIV_ASSEMBLY") {
            InfoEPartDivision$.val("@Common.Constant.EBomConstant.DIV_ASSEMBLY_NM");
            $('.DivisionSingleDrawing_' + EPartOID).prop('hidden', 'hidden');
            $('.DivisionStandard_' + EPartOID).prop('hidden', 'hidden');
        } else if ("@Model.Division" == "@Common.Constant.EBomConstant.DIV_SINGLE") {
            InfoEPartDivision$.val("@Common.Constant.EBomConstant.DIV_SINGLE_NM");
            $('.DivisionAssemblyDrawing_' + EPartOID).prop('hidden', 'hidden');
            $('.DivisionStandard_' + EPartOID).prop('hidden', 'hidden');
        } else if ("@Model.Division" == "@Common.Constant.EBomConstant.DIV_STANDARD") {
            InfoEPartDivision$.val("@Common.Constant.EBomConstant.DIV_STANDARD_NM");
            $('.DivisionAssemblyDrawing_' + EPartOID).prop('hidden', 'hidden');
            $('.DivisionSingleDrawing_' + EPartOID).prop('hidden', 'hidden');
        }

        if (headerStatus != null && headerStatus.length > 0) {
            headerStatus.removeClass('pointer_focus');
            const currentStatus = headerStatus.filter(function (index, item) {
                return item.getAttribute('data-Status') == current;
            });
            if (currentStatus != null && currentStatus.length > 0) {
                currentStatus[0].className += ' ' + 'pointer_focus';
            }
        }

        var InfoEPartThumbnailData = "@Model.Thumbnail";
        $('#imageDrag_' + @ViewBag.OID).simpleUpload({
            url: '/Common/ImgUploadFile',
            //params: { OID: null },
            method: 'post',
            maxFileNum: 1,
            maxFileSize: 1000000,
            allowedMimeType: ['image/jpeg', 'image/png', 'image/gif', 'image/jpg'],
            dropZone: '#dropZone_' + @ViewBag.OID,
        }).on('upload:over', function (e, files) {
            alert('Number of files is over');
        }).on('upload:invalid', function (e, files) {
            for (var i = 0; i < files.length; i++) {
                alert('Invalid ' + files[i].reason + ': ' + files[i].name);
            }
        }).on('upload:done', function (e, file, index, data, xhr) {
            $('#uploadResult_' + @ViewBag.OID).empty();
            $('#uploadResult_' + @ViewBag.OID).append('<li>' + '<img class="img-thumbnail" src="@Url.Content("~/images/Thumbnail/")' + data + '" />' + '<i class="fas fa-window-close"></i></li>');
            InfoEPartThumbnailData = data;
            $('.img-thumbnail').on('click', function () {
                $(this).addClass('showbigimage');
                return false;
            });
            $(window).click(function () {
                $('.img-thumbnail').removeClass('showbigimage');
            });
            $('.img-thumbnail').next().on('click', function () {
                $(this).parent('li').remove();
            });
        });


        $('#InfoEPart_' + EPartOID + ' .tab').on('click', function () {
            const self$ = $(this);
            const infoValue = self$.attr('info');
            //control side menu
            EPartDiv$.find('[class="tab info_focus"]').removeClass('info_focus');
            self$.addClass('info_focus');
            EPartDiv$.find('[class="basic_grid"]').addClass('dective');
            EPartDiv$.find('[id="' + infoValue + '"]').removeClass('dective');

            if (infoValue == 'properties') {


                $('#EditBtn_' + EPartOID).on('click', function () {

                });

                @*
                $('#EditCancelBtn_' + EPartOID).on('click', function () {
                    if (InfoEPartPageReloadFlag == "F") {
                        return;
                    }
                    InfoEPartPageReloadFlag = "F";
                    PageReload();

                });


                $('#EditSaveBtn_' + EPartOID).on('click', function () {
                    if (InfoEPartPageReloadFlag == "F") {
                        return;
                    }
                    InfoEPartPageReloadFlag = "F";
                    var InfoEPartParam = {};
                    InfoEPartParam.OID = "@ViewBag.OID";
                    InfoEPartParam.Title = $("#InfoEPartTitle_" + EPartOID).val();
                    InfoEPartParam.Material_OID = InfoEPartMaterial$.val();
                    InfoEPartParam.Surface = $("#InfoEPartSurface_" + EPartOID).val();
                    InfoEPartParam.CO = $("#InfoEPartCO_" + EPartOID).jqxCheckBox('checked');
                    InfoEPartParam.Eo_No = $("#InfoEPartEo_No_" + EPartOID).val();
                    InfoEPartParam.Eo_No_ApplyDt = $("#InfoEPartEoNoApplyDt_" + EPartOID).val();
                    InfoEPartParam.Eo_No_History = $("#InfoEPartEoNoHistory_" + EPartOID).val();
                    InfoEPartParam.Spec = $("#InfoEPartSpec_" + EPartOID).val();
                    InfoEPartParam.Etc = $("#InfoEPartEtc_" + EPartOID).val();

                    InfoEPartParam.EPartType = InfoEPartType;

                    InfoEPartParam.Rep_Part_No = $("#InfoEPartRepPartNo_" + EPartOID).val();
                    InfoEPartParam.Rep_Part_No2 = $("#InfoEPartRepPartNo2_" + EPartOID).val();

                    InfoEPartParam.Prod_Lib_Lev1_OID = InfoProdLibLev1$.val();
                    InfoEPartParam.Prod_Lib_Lev2_OID = InfoProdLibLev2$.val();
                    InfoEPartParam.Prod_Lib_Lev3_OID = InfoProdLibLev3$.val();

                    InfoEPartParam.Etc_Delivery = $("#InfoEPartEtcDelivery_" + EPartOID).jqxCheckBox('checked');
                    InfoEPartParam.Sel_Eo = $("#InfoEPartSelEo_" + EPartOID).val();
                    InfoEPartParam.Sel_Eo_Dt = $("#InfoEPartSelEoDt_" + EPartOID).val();

                    InfoEPartParam.Type = '@Common.Constant.EBomConstant.TYPE_PART';
                    if (InfoEPartThumbnailData != null) {
                        InfoEPartParam.Thumbnail = InfoEPartThumbnailData;
                    }


                    RequestData('/EBom/UdtEPartObj', InfoEPartParam, function (response) {
                        if (response.isError) {
                            alert(response.resultMessage);
                            return;
                        }
                        alert("저장되었습니다.");
                        PageReload();
                    });
                    //UdtDObject
                });*@

            } else if (infoValue == 'Apphis') {

            } else if (infoValue == 'Downhis') {

            } else if (infoValue == 'Reverse') {
                EBomParam.OID = EPartOID;
                var ReverseEBomSource =
                {
                    dataType: "json",
                    dataFields: [
                        { name: 'OID', type: 'number' },
                        { name: 'FromOID', type: 'number' },
                        { name: 'ToOID', type: 'number' },
                        { name: 'Parents', type: 'array' },
                        { name: 'Ord', type: 'number' },
                        { name: 'Count', type: 'number' },

                        { name: 'ObjRevision', type: 'text' },
                        { name: 'ObjTdmxOID', type: 'text' },
                        { name: 'ObjIsLatest', type: 'number' },

                        { name: 'Level', type: 'number' },
                        { name: 'ObjName', type: 'text' },
                        { name: 'ObjName', type: 'text' },
                        { name: 'ObjEPartType', type: 'text' },
                        { name: 'ObjITEM_No', type: 'text' },
                        { name: 'ObjITEM_NoNm', type: 'text' },
                        { name: 'ObjMaterial_OID', type: 'text' },
                        { name: 'ObjMaterial_Nm', type: 'text' },
                        { name: 'ObjITEM_Middle', type: 'text' },
                        { name: 'ObjITEM_MiddleNm', type: 'text' },
                        { name: 'ObjThumbnail', type: 'text' },
                        { name: 'ObjBlock_No', type: 'text' },
                        { name: 'ObjBlock_NoNm', type: 'text' },
                        { name: 'ObjProduction_Place', type: 'text' },
                        { name: 'ObjProduction_PlaceNm', type: 'text' },
                        { name: 'ObjCar_Lib_OID', type: 'number' },
                        { name: 'ObjCar_Lib_Nm', type: 'text' },
                    ],
                    hierarchy:
                    {
                        root: 'Parents',
                    },
                    id: 'OID',
                    addRow: function (rowID, rowData, position, parentID, commit) {
                        newRowID = rowID;
                        commit(true);
                    },
                    updateRow: function (rowID, rowData, commit) {
                        commit(true);
                    }
                };

                var ReverseDataAdapter = new $.jqx.dataAdapter(ReverseEBomSource);
                const ReverseEBomTreeGrid$ = $('#ReverseInfo_' + EPartOID);
                ReverseEBomTreeGrid$.jqxTreeGrid('render');
                ReverseEBomTreeGrid$.jqxTreeGrid({
                    width: "100%",
                    height: 665,
                    theme: "kdnc",
                    sortable: true,
                    showToolbar: true,
                    editable: false,
                    source: ReverseDataAdapter,
                    ready: function () {
                    },
                    columns: [
                        { name: 'Level', dataField: 'Level', type: 'number', width: '10%' },
                        { name: 'ObjCar_Lib_Nm', dataField: 'ObjCar_Lib_Nm', type: 'text', text: '차종', width: '15%' },
                        { name: 'ObjName', dataField: 'ObjName', type: 'text', text: '품번', width: '15%' },
                        { name: 'ObjITEM_NoNm', dataField: 'ObjITEM_NoNm', type: 'text', text: 'ITEM_NO', width: '15%' },
                        { name: 'ObjMaterial_Nm', dataField: 'ObjMaterial_Nm', type: 'text', text: '재질', width: '11%' },
                        { name: 'ObjBlock_NoNm', dataField: 'ObjBlock_NoNm', type: 'text', text: 'BLOCK_NO', width: '12%' },
                        { name: 'Ord', dataField: 'Ord', type: 'number', text: '순서', width: '5%' },
                        { name: 'Count', dataField: 'Count', type: 'number', text: '수량', width: '5%' },
                        { name: 'ObjThumbnail', dataField: 'ObjThumbnail', type: 'text', text: '이미지', width: '12%' },
                    ]
                });


                RequestData('/EBom/SelectReverseEBom', EBomParam, function (res) {
                    PrintJqxTreeGrid(ReverseEBomSource, ReverseEBomTreeGrid$, [res]);
                    ReverseEBomTreeGrid$.jqxTreeGrid('expandAll');
                });


            } else if (infoValue == 'Structure') {
                var maxId = 0;
                var click = true;
                EBomParam.OID = EPartOID;

                //rowSelectFlag = "T";

                var DelDataList = [];
                //var UpdDataList = [];

                var EBomsource =
                {
                    dataType: "json",
                    dataFields: [
                        { name: 'diseditable', type: 'array' },

                        { name: 'OID', type: 'number' },
                        { name: 'FromOID', type: 'number' },
                        { name: 'ToOID', type: 'number' },
                        { name: 'Children', type: 'array' },
                        { name: 'Ord', type: 'number' },
                        { name: 'Count', type: 'number' },
                        { name: 'Action' },
                        { name: 'OldOID' },

                        { name: 'ObjRevision', type: 'text' },
                        { name: 'ObjTdmxOID', type: 'text' },
                        { name: 'ObjIsLatest', type: 'number' },

                        { name: 'Level', type: 'number' },
                        { name: 'ObjName', type: 'text' },
                        { name: 'ObjEPartType', type: 'text' },
                        { name: 'ObjITEM_No', type: 'text' },
                        { name: 'ObjITEM_NoNm', type: 'text' },
                        { name: 'ObjMaterial_OID', type: 'text' },
                        { name: 'ObjMaterial_Nm', type: 'text' },
                        { name: 'ObjITEM_Middle', type: 'text' },
                        { name: 'ObjITEM_MiddleNm', type: 'text' },
                        { name: 'ObjThumbnail', type: 'text' },
                        { name: 'ObjBlock_No', type: 'text' },
                        { name: 'ObjBlock_NoNm', type: 'text' },
                        { name: 'ObjProduction_Place', type: 'text' },
                        { name: 'ObjProduction_PlaceNm', type: 'text' },
                        { name: 'ObjCar_Lib_OID', type: 'number' },
                        { name: 'ObjCar_Lib_Nm', type: 'text' },
                    ],
                    hierarchy:
                    {
                        root: 'Children',
                    },
                    id: 'OID',
                    addRow: function (rowID, rowData, position, parentID, commit) {
                        //rowData.Level = rowData.level;
                        if (maxId == 0) {
                            maxId = (_.max(fEPartArray(EBomTreeGrid$.jqxTreeGrid('getRows')), function (data) { return data.Id })).Id;
                        } else {
                            maxId = maxId + 1;
                        }
                        maxId = maxId == undefined ? 0 : maxId;
                        rowData.OID = rowID;
                        rowData.Id = maxId + 1;

                        newRowID = rowID;
                        commit(true);

                        EBomTreeGrid$.jqxTreeGrid('clearSelection');
                        EBomTreeGrid$.jqxTreeGrid('selectRow', newRowID);
                        EBomTreeGrid$.jqxTreeGrid('getRow', parentID).Children = EBomTreeGrid$.jqxTreeGrid('getRow', parentID).records;

                        //newRowID = rowID;
                        //commit(true);
                    },
                    updateRow: function (rowID, rowData, commit) {
                        //순서 수량 변경

                        const updObj = EBomTreeGrid$.jqxTreeGrid('getRow', rowID);
                        if (updObj.Action != "RU") {
                            updObj.Action = "U";
                        }

                        //DataList.push({ 'Action': 'U', 'FromOID': updObj.FromOID, 'ToOID': updObj.ToOID, 'Ord': updObj.Ord, 'Count': updObj.Count });
                        commit(true);
                    },
                    deleteRow: function (rowID, commit) {
                        EBomTreeGrid$.jqxTreeGrid('getRow', rowID);
                        const delObj = EBomTreeGrid$.jqxTreeGrid('getRow', rowID);
                        if (delObj.Action == "D") {
                            DelDataList.push({ 'Action': 'D', 'OID': delObj.OID });
                        }

                        commit(true);
                    }
                };
                var dataAdapter = new $.jqx.dataAdapter(EBomsource);
                const EBomTreeGrid$ = $('#StructureInfo_' + EPartOID);
                EBomTreeGrid$.jqxTreeGrid('render');
                EBomTreeGrid$.jqxTreeGrid({
                    width: "100%",
                    theme: "kdnc",
                    height: 665,
                    sortable: true,
                    showToolbar: true,
                    toolbarHeight: 44,
                    editable: false,
                    source: dataAdapter,

                    columns: [
                        { name: 'Level', dataField: 'Level', type: 'number', width: '10%', editable: false },
                        { name: 'OID', dataField: 'OID', type: 'number', editable: false, hidden: true },
                        { name: 'FromOID', dataField: 'FromOID', type: 'number', editable: false, hidden: true },
                        { name: 'ToOID', dataField: 'ToOID', type: 'number', editable: false, hidden: true },

                        { name: 'ObjCar_Lib_Nm', dataField: 'ObjCar_Lib_Nm', type: 'text', text: '차종', width: '15%', editable: false },
                        {
                            name: 'ObjName', id: 'ObjName', dataField: 'ObjName', type: 'text', text: '품번', width: '15%', editable: false,
                            cellsRenderer: function (row, dataField, cellValue, rowData, cellText) {
                                if (rowData.ToOID == @ViewBag.OID) {

                                } else {
                                    var vText = cellText;
                                    return vText + ' <a href="#" onclick="EPartNewTabClick(\'/EBom/InfoEPart\', ' + rowData.ToOID + ', \'' + rowData.ObjName + '\')" ><i class="fas fa-window-maximize"></i></a>';
                                }
                            }
                        },
                        { name: 'ObjITEM_NoNm', dataField: 'ObjITEM_NoNm', type: 'text', text: 'ITEM_NO', width: '15%', editable: false },
                        { name: 'ObjMaterial_Nm', dataField: 'ObjMaterial_Nm', type: 'text', text: '재질', width: '11%', editable: false },
                        { name: 'ObjBlock_NoNm', dataField: 'ObjBlock_NoNm', type: 'text', text: 'BLOCK_NO', width: '12%', editable: false },
                        {
                            name: 'Ord', dataField: 'Ord', type: 'number', text: '순서', width: '5%', cellsRenderer: function (row, dataField, cellValue, rowData) {
                                var editable = EBomTreeGrid$.jqxTreeGrid('editable');
                                if (editable && rowData.ToOID != @ViewBag.OID) {
                                    if (cellValue == "") {
                                        return "<div class='editableCell' style='height:30px;'><div></div></div>";
                                    }
                                    return "<div class='editableCell'><div></div></div>" + cellValue;
                                }
                            },
                        },
                        { name: 'Count', dataField: 'Count', type: 'number', text: '수량', width: '5%', cellsRenderer: function (row, dataField, cellValue, rowData) {
                                var editable = EBomTreeGrid$.jqxTreeGrid('editable');
                                if (editable && rowData.ToOID != @ViewBag.OID) {
                                    if (cellValue == "") {
                                        return "<div class='editableCell' style='height:30px;'><div></div></div>";
                                    }
                                    return "<div class='editableCell'><div></div></div>" + cellValue;
                                }

                            },
                        },
                        {
                            name: 'ObjThumbnail', dataField: 'ObjThumbnail', type: 'text', text: '이미지', width: '12%', editable: false,
                            cellsrenderer: function (row, column, value) {
                                if (value.length > 1) {
                                    return "<div class='ebomImg'><img src='@Url.Content("~/images/Thumbnail/")" + value + "'></div>";
                                } else {
                                    return ""
                                }
                            }
                        },
                    ],
                    rendertoolbar: function (toolBar) {
                        var modifyFlag = false;
                        var container = $("<div class='lGridComponent' ></div>");
                        var modifyButton = $("<button class='custom-button'><i class='fas fa-edit'></i> 수정</button>").jqxButton();
                        var AddButton = $("<button id='ChildAddBtn' class='custom-button'><i class='fas fa-plus'></i> 추가</button>").jqxButton();
                        var replacedButton = $("<button id='ReplacedBtn' class='custom-button'><i class='fas fa-exchange-alt'></i> 대체</button>").jqxButton();
                        var deleteButton = $("<button id='DeleteBtn' class='custom-button'><i class='fas fa-minus'></i> 선택삭제</button>").jqxButton();
                        var saveButton = $("<button class='custom-button'><i class='fas fa-save'></i> 저장</button>").jqxButton();
                        var cancelButton = $("<button class='custom-button'><i class='fas fa-window-close'></i> 취소</button>").jqxButton();
                        var excelButton = $("<button class='custom-button'><i class='fas fa-file-excel'></i> excelExport</button>").jqxButton();


                        AddButton.jqxButton({ disabled: true });
                        deleteButton.jqxButton({ disabled: true });
                        saveButton.jqxButton({ disabled: true });
                        cancelButton.jqxButton({ disabled: true });
                        replacedButton.jqxButton({ disabled: true });

                        container.append(modifyButton);
                        container.append('<span class="buttonSeparator"></span>');
                        container.append(AddButton);
                        container.append(replacedButton);
                        container.append(deleteButton);
                        container.append('<span class="buttonSeparator"></span>');
                        container.append(saveButton);
                        container.append(cancelButton);
                        container.append('<span class="buttonSeparator"></span>');
                        container.append(excelButton);
                        toolBar.append(container);

                        var actionContent = function (action) {
                            switch (action.toUpperCase()) {
                                case "MODIFY":
                                    EBomTreeGrid$.jqxTreeGrid({ editable: true });
                                case "CANCEL":
                                    modifyFlag = !modifyFlag;
                                    modifyButton.jqxButton({ disabled: modifyFlag });
                                    saveButton.jqxButton({ disabled: !modifyFlag });
                                    cancelButton.jqxButton({ disabled: !modifyFlag });
                                    if (action.toUpperCase() == 'CANCEL') {
                                        replacedButton.jqxButton({ disabled: !modifyFlag });
                                        AddButton.jqxButton({ disabled: !modifyFlag });
                                        deleteButton.jqxButton({ disabled: !modifyFlag });
                                        EBomTreeGrid$.jqxTreeGrid({ editable: false });
                                    }
                                    break;
                                case "SELECT":
                                    if (action.toUpperCase() == 'SELECT') {
                                        replacedButton.jqxButton({ disabled: !modifyFlag });
                                        AddButton.jqxButton({ disabled: !modifyFlag });
                                        deleteButton.jqxButton({ disabled: !modifyFlag });
                                    }
                                    break;
                                case "LEVEL":
                                    if (action.toUpperCase() == 'LEVEL') {
                                        deleteButton.jqxButton({ disabled: true });
                                        replacedButton.jqxButton({ disabled: true });
                                    }
                                    break;
                                case "UNSELECT":
                                    replacedButton.jqxButton({ disabled: true });
                                    AddButton.jqxButton({ disabled: true });
                                    deleteButton.jqxButton({ disabled: true });
                                    break;
                            }
                        };

                        modifyButton.click(function (event) {
                            maxId = 0;
                            rowKey = null;
                            EBomTreeGrid$.jqxTreeGrid('clearSelection');
                            actionContent('modify');
                        });

                        saveButton.click(function (event) {
                            if (confirm('저장하시겠습니까?')) {
                                if (click) {
                                    click = !click;
                                } else {
                                    return;
                                }
                                var EditDataList = [];

                                var EditData = fEPartArray(EBomTreeGrid$.jqxTreeGrid('getRows'));

                                for (var i = 0; i < EditData.length; i++) {
                                    if (EditData[i].Action != null) {
                                        var EditDataParam = {};
                                        EditDataParam.Action = EditData[i].Action;
                                        EditDataParam.FromOID = EditData[i].FromOID;
                                        EditDataParam.ToOID = EditData[i].ToOID;
                                        EditDataParam.Count = EditData[i].Count;
                                        EditDataParam.Ord = EditData[i].Ord;
                                        EditDataParam.OldOID = EditData[i].OldOID;
                                        EditDataList.push(EditDataParam);
                                    }
                                }

                                RequestData('/EBom/EditStructure', { _param: EditDataList.concat(DelDataList) }, function (response) {
                                    if (response.isError) {
                                        alert(response.resultMessage);
                                        return;
                                    }
                                    if (response == 1) {
                                        alert("값이 비었습니다.");
                                        DelDataList = [];
                                        cancelButton.click();
                                        modifyFlag = false;
                                        click = !click;
                                        return;
                                    }
                                    alert("저장되었습니다.");
                                    DelDataList = [];
                                    cancelButton.click();
                                    modifyFlag = false;
                                    click = !click;
                                });
                            }
                        });

                        replacedButton.click(function (event) {
                            if (click) {
                                click = !click;
                            } else {
                                return;
                            }

                            var checkRows = EBomTreeGrid$.jqxTreeGrid('getSelection');
                            if (checkRows.length == 0) {
                                return;
                            }

                            OpenSearchEBomTreeDialog(function (res) {
                                EBomTreeGrid$.jqxTreeGrid('selectRow', rowKey);
                            }, null, null, '/EBom/dlgSearchEBomStructure?OID=' + EPartOID, 'EBOM 추가', null, EBomTreeGrid$, rowKey, "RU", checkRows);

                            click = !click;
                        });


                        AddButton.click(function (event) {
                            if (!AddButton.jqxButton('disabled')) {

                                var checkRows = EBomTreeGrid$.jqxTreeGrid('getSelection');
                                if (checkRows.length == 0) {
                                    return;
                                }

                                OpenSearchEBomTreeDialog(function (res) {
                                    EBomTreeGrid$.jqxTreeGrid('selectRow', rowKey);
                                }, null, null, '/EBom/dlgSearchEBomStructure?OID=' + EPartOID, 'EBOM 추가', null, EBomTreeGrid$, rowKey, "A", checkRows);
                            }
                        });

                        cancelButton.click(function (event) {
                            actionContent('cancel');
                            getEPartList(EBomsource, EBomTreeGrid$, EBomParam);
                        });

                        deleteButton.click(function (event) {
                            if (!deleteButton.jqxButton('disabled')) {
                                var Key = rowKey;
                                var DeleteKey = EBomTreeGrid$.jqxTreeGrid('getRow', Key);
                                //EBomTreeGrid$.jqxTreeGrid('updateRow', Key, { Action : "D" });
                                //EBomTreeGrid$.jqxTreeGrid('updateBoundData');
                                //EBomTreeGrid$.jqxTreeGrid('deleteRow', Key);
                                //EBomTreeGrid$.jqxTreeGrid('clearSelection');

                                DeleteKey.Action = "D";
                                EBomTreeGrid$.jqxTreeGrid('deleteRow', Key);
                                EBomTreeGrid$.jqxTreeGrid('clearSelection');

                                EBomTreeGrid$.jqxTreeGrid('expandAll');
                                actionContent('unSelect');
                            }
                        });

                        excelButton.click(function () {
                            EBomTreeGrid$.jqxTreeGrid({
                                exportSettings: {
                                    fileName: "@Model.Name"
                                }
                            });
                            EBomTreeGrid$.jqxTreeGrid('exportData', 'xls');
                        });

                        rowKey = null;
                        EBomTreeGrid$.on('rowSelect', function (event) {
                            if (rowKey == event.args.key) {
                                return;
                            }
                            var previousRowKey = null;
                            var checkRows = EBomTreeGrid$.jqxTreeGrid('getSelection');
                            if (checkRows != null && checkRows.length > 0) {
                                previousRowKey = checkRows.filter(function (item) {
                                    return item.OID != rowKey
                                });
                                if (previousRowKey.length > 0) {
                                    previousRowKey = previousRowKey[0].ToOID;
                                } else {
                                    previousRowKey = rowKey;
                                }
                            }
                            var args = event.args;
                            if (previousRowKey != rowKey) {
                                //EBomTreeGrid$.jqxTreeGrid('unselectRow', rowKey);
                            }
                            rowKey = args.key;
                            actionContent('Select');
                            if (rowKey == 0) {
                                actionContent('Level');
                            }
                        });
                    },
                });

                RequestData('/EBom/SelectEBom', EBomParam, function (res) {
                    PrintJqxTreeGrid(EBomsource, EBomTreeGrid$, [res]);
                    EBomTreeGrid$.jqxTreeGrid('expandAll');
                    //EBomTreeGrid$.jqxTreeGrid('sortBy', 'Ord', 'asc');
                });

                EBomTreeGrid$.on('rowEndEdit',
                    function (event) {
                        var args = event.args;
                        var row = args.row;
                        var key = args.key;

                        if (row == null) {
                            return;
                        }
                    });
            }
        });

        $('.info_focus').click();
    });

    function getEPartList(_Source, _Grid$, EBomParam) {
        RequestData('/EBom/SelectEBom', EBomParam, function (res) {
            PrintJqxTreeGrid(_Source, _Grid$, [res]);
            _Grid$.jqxTreeGrid('expandAll');
        });
    }


    function ChangeEPartLib(OID, ID) {
        var comboBox$ = ID;
        var param = {};
        param.fromOID = OID;
        var comboSource;
        RequestData("/Manage/SelLibrary", param, function (res) {
            if (res.length > 0) {
                comboSource =
                {
                    localdata: res,
                    datatype: "json",
                    datafields:
                        [
                            { name: 'KorNm', type: 'string' },
                            { name: 'OID', type: 'int' },
                        ]
                };
                var comboAdapter = new $.jqx.dataAdapter(comboSource);
                comboBox$.jqxComboBox({ source: comboAdapter, displayMember: "KorNm", valueMember: "OID", width: "100%", height: 30 });
            }
        });
    }

</script>
