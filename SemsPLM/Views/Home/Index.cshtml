@{
    ViewBag.Title = "Homepage";
}

<div class="mainDashboard">

    <div id="wrapProject" style="margin-right:1%;">
        <div class="mainStatusCount clearfix">
            <h3>업무 현황</h3>
            <div>
                <div style="background-color:#008FFB;" class="icon">
                    <i class="fas fa-list-ul"></i>
                </div>
                <div class="text">
                    <h4>진행 중 업무</h4>
                    <p><span onclick="OpenPageDialog()" id="spStarted">0</span>건</p>
                </div>
            </div>
            <div>
                <div style="background-color:#00E396;" class="icon">
                    <i class="fas fa-tasks"></i>
                </div>
                <div class="text">
                    <h4>완료 업무</h4>
                    <p><span onclick="OpenPageDialog()" id="spComplete">0</span>건</p>
                </div>
            </div>
            <div>
                <div style="background-color:#FEB019;" class="icon">
                    <i class="far fa-calendar-check"></i>
                </div>
                <div class="text">
                    <h4>진행 예정 업무</h4>
                    <p><span onclick="OpenPageDialog()" id="spPrepare">0</span>건</p>
                </div>
            </div>
            <div>
                <div style="background-color:#FF4560;" class="icon">
                    <i class="far fa-calendar-times"></i>
                </div>
                <div class="text">
                    <h4>지연 업무</h4>
                    <p><span onclick="OpenPageDialog()" id="spDelay">0</span>건</p>
                </div>
            </div>
        </div>

        <div class="mainProjectCharts">
            <div style="margin-right:1%;">
                <h3>전체 프로젝트 진행 제품군</h3>
                <div id="chartPrjectGroup" style="width:100%; padding:20px 0 0 30px;"></div>
            </div>
            <div>
                <h3>이슈 현황</h3>
                <div id="chartMyTask" style="width:100%;padding-top:15px;"></div>
            </div>
            <div style="padding-top:20px;width:100%;">
                <h3>진행중인 프로젝트 진척률</h3>
                <div id="chartPrjectTask" style="padding-top:15px;"></div>
            </div>
        </div>

    </div>

    <div id="wrapApprovalNotice">
        <div class="mainStatusCount clearfix">
            <h3>결재사항</h3>
            <div>
                <div style="background-color:#775DD0;" class="icon">
                    <i class="far fa-paper-plane"></i>
                </div>
                <div class="text">
                    <h4>진행 중 결재</h4>
                    <p><span id="spStartedApprov">0</span>건</p>
                </div>
            </div>
            <div>
                <div style="background-color:#546E7A;" class="icon">
                    <i class="far fa-file-alt"></i>
                </div>
                <div class="text">
                    <h4>금주 완료된 결재</h4>
                    <p><span id="spWeekCompleteApprov">0</span>건</p>
                </div>
            </div>
            <div>
                <div style="background-color:#26a69a;" class="icon">
                    <i class="fas fa-pen-fancy"></i>
                </div>
                <div class="text">
                    <h4>처리할 결재</h4>
                    <p><span id="spPrepareApprov">0</span>건</p>
                </div>
            </div>
            <div>
                <div style="background-color:#D10CE8;" class="icon">
                    <i class="fas fa-redo"></i>
                </div>
                <div class="text">
                    <h4>반려된 결재</h4>
                    <p><span id="spRejectApprov">0</span>건</p>
                </div>
            </div>
        </div>

        <div class="mainApprovalGrids">
            <div id="tabApproval">
                <ul class="mainApprovalList">
                    <li>진행중 결재</li>
                    <li>완료된 결재</li>
                    <li>반려된 결재</li>
                </ul>
                <!--TAB을 이중으로 감싸서 각 Page들의 Div 에 Margin 값이 적용 안되게 처리함-->
                <!--<div id="mainApprovalCont">-->
                <div>
                    <div id="grdApprovalDemandList"></div>
                </div>
                <div>
                    <div id="grdApprovalFinishList"></div>
                </div>
                <div>
                    <div id="grdApprovalRejectList"></div>
                </div>
                <!--</div>-->
            </div>
        </div>
        <div class="mainNoticeGrid">
            <h3>공지사항</h3>
            @*<button id="btnNotice"><i class="fas fa-plus" style="transform:unset;"></i> More</button>*@
            <div class="noticeBtn">
                <button id="btnAddNotice"><i class="fas fa-edit"></i> 작성</button>
                <button id="btnDelNotice"><i class="fas fa-trash"></i> 삭제</button>
            </div>
            <div id="grdNotice" class="grdNotice"></div>
        </div>
    </div>

</div>

<script type="text/javascript">
    $(function () {

        //전체 프로젝트 진행 제품군
        var processPrdtData = [22,30,34,41,25,30,14];
        var processPrdtLabels = ['Actuator','Heater','Control Head','Clutch Coil','Sensors','Valve','EPB'];
        var processPrdtSetting = {
            series: processPrdtData,
            labels: processPrdtLabels,
            chart: {
                type: 'pie',
                width: 400,
            },
            legend: {
                    position: 'right',
                    horizontalAlign: 'center',
                    floating: false,
            },
            colors:['#008ffb','#00c4f0', '#39d7b9', '#00e396', '#a4c953', '#feb019', '#f44336'],
            responsive: [{
                breakpoint:480,
            }]
        }
        var processPrdtPieChart = new ApexCharts(document.querySelector('#chartPrjectGroup'), processPrdtSetting);
        processPrdtPieChart.render();
       

        //이슈 리스크 현황
        var issueRiskTaskList = [];
        var issueRiskSample = [

        ];

        var issueRiskSetting = {
            series: issueRiskSample,
            chart: {
                type: 'bar',
                width:462,
                height: 250,
                zoom: {
                        enabled:true,
                    },
                    toolbar: {
                        show: true,
                        tools: {
                            download: true,
                            selection: true,
                            zoom: true,
                            zoomin: true,
                            zoomout: true,
                            pan: true,
                            reset: true,
                        },
                        autoSelected: 'pan'
                    }
            },
            colors: ['rgb(0,143,251)', 'rgb(244,67,54)', 'rgb(0,227,150)'],
            plotOptions: {
                bar: {
                    horizontal: false,
                    columnWidth: '50%',
                }
            },
            dataLabels: {
                enabled:false
            },
            xaxis: {
                categories: issueRiskTaskList,
                    tickPlacement:'on',
            },
            legend: {
                show: true,
                position: 'bottom',
                horizontalAlign:'center'
            },
            grid: {
                padding: {
                    left: 50,
                    right: 50
                }
            }
        }
        var issueRiskChart = new ApexCharts(document.querySelector('#chartMyTask'), issueRiskSetting);
        issueRiskChart.render();
        callProjectIssueDVPV("issue");
        function callProjectIssueDVPV(param) {
            issueRiskTaskList = [];
            issueRiskSample = [];
            RequestData('/Pms/callProjectIssueDVPV', { _Type: param }, function (res) {
                _.each(res.PROJECT, function (item) {
                    issueRiskTaskList.push(item);
                });

                _.each(res.COUNT, function (item, key) {
                    issueRiskSample.push({
                        'name': key,
                        'data': item
                    });
                });

                issueRiskChart.updateOptions({ xaxis: { categories: issueRiskTaskList } });
                issueRiskChart.updateSeries(issueRiskSample);

                const totalIssueSpan$ = $('#chartMyTask');
                const reducer = (accumulator, currentValue) => accumulator + currentValue;
              //  totalIssueSpan$.empty();
                //var barIssueDataArr = [];
                //issueRiskSample.forEach(function (e) {
                //    barIssueDataArr.push(e.data.reduce(reducer));
                //});
                //var barIssueTotal = barIssueDataArr.reduce(reducer);
                //totalIssueSpan$.append(barIssueTotal)

            });
        }

        //진행중인 프로젝트 진척률
        var prjectTaskList = ['Task1', 'Task2', 'Task3', 'Task4'];
        var prjectTaskSample = [
            {name:'완료', data:[18,5,12,20]},
            {name:'지연', data:[10,2,16,10]},
            {name:'준비', data:[20,10,23,18]},
            {name:'진행', data:[30,12,18,23]},
        ]
        var prjectTaskSetting = {
            series: prjectTaskSample,
            chart: {
                type: 'bar',
                width:940,
                height: 250,
                zoom: {
                        enabled:true,
                    },
                    toolbar: {
                        show: true,
                        tools: {
                            download: true,
                            selection: true,
                            zoom: true,
                            zoomin: true,
                            zoomout: true,
                            pan: true,
                            reset: true,
                        },
                        autoSelected: 'pan'
                    }
            },
            colors:['rgb(0,143,251)', 'rgb(244,67,54)', 'rgb(254,176,25)', 'rgb(0,227,150)'],
            plotOptions: {
                bar: {
                    horizontal: false,
                    columnWidth: '50%',
                }
            },
            dataLabels: {
                enabled:false
            },
            xaxis: {
                categories: prjectTaskList,
                    tickPlacement:'on',
            },
            legend: {
                show: true,
                position: 'bottom',
                horizontalAlign:'center'
            },
            grid: {
                padding: {
                    left: 100,
                    right: 100
                }
            }
        }
        var prjectTaskChart = new ApexCharts(document.querySelector('#chartPrjectTask'), prjectTaskSetting);
        prjectTaskChart.render();


        //결재
        $('#tabApproval').jqxTabs({ width: "100%", height: 344, });

        const myApprovalSource = {
            datatype: 'json',
            dafafields: [
                { name: 'OID', type: 'number' },
                { name: 'Name', type: 'string' },
                { name: 'Description', type: 'string' },
                { name: 'DocType', type: 'string' },
                { name: 'DocNm', type: 'string' },
                { name: 'DocBpolicyNm', type: 'string' },
                { name: 'DocCreateUs', type: 'number' },
                { name: 'DocCreateNm', type: 'string' },
            ],
        }

        $("#grdApprovalDemandList").jqxGrid({
            width: "100%",
            height: 280,
            rowsheight: 28,
            columnsheight: 30,
            //source:,
            sortable: false,
            pageable: false,
            showtoolbar: false,
            columns: [
                {
                    text: 'NO', width: "5%", cellsalign: 'center', columntype: 'number', align: 'center',
                    cellsrenderer: function (row, column, value) {
                        return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:1.9;'>" + (value + 1) + "</div>";
                    }
                },
                { text: '타입', width: "10%", datafield: 'DocType', align: 'center', cellsalign: 'center', },
                { text: '결재 제목', width: "45%", datafield: 'Description', align: 'center', cellsalign: 'left', },
                { text: '작성자', width: "10%", datafield: 'DocCreateNm', align: 'center', cellsalign: 'center', },
                { text: '문서명', width: "20%", datafield: 'DocNm', align: 'center', cellsalign: 'center', cellsformat: 'yyyy-MM-dd HH:mm:ss' },
                { text: '상태', width: "10%", datafield: 'DocBpolicyNm', align: 'center', cellsalign: 'center' }
            ]
        });

        $("#grdApprovalFinishList").jqxGrid({
            width: "100%",
            height: 280,
            rowsheight: 28,
            columnsheight: 30,
            //source:,
            sortable: false,
            pageable: false,
            showtoolbar: false,
            columns: [
                {
                    text: 'NO', width: "5%", cellsalign: 'center', columntype: 'number', align: 'center',
                    cellsrenderer: function (row, column, value) {
                        return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:1.9;'>" + (value + 1) + "</div>";
                    }
                },
                { text: '타입', width: "10%", datafield: 'DocType', align: 'center', cellsalign: 'center', },
                { text: '결재 제목', width: "45%", datafield: 'Description', align: 'center', cellsalign: 'left', },
                { text: '작성자', width: "10%", datafield: 'DocCreateNm', align: 'center', cellsalign: 'center', },
                { text: '문서명', width: "20%", datafield: 'DocNm', align: 'center', cellsalign: 'center', cellsformat: 'yyyy-MM-dd HH:mm:ss' },
                { text: '상태', width: "10%", datafield: 'DocBpolicyNm', align: 'center', cellsalign: 'center' }
            ]
        });

        $("#grdApprovalRejectList").jqxGrid({
            width: "100%",
            height: 280,
            rowsheight: 28,
            columnsheight: 30,
            //source:,
            sortable: false,
            pageable: false,
            showtoolbar: false,
            columns: [
                {
                    text: 'NO', width: "5%", cellsalign: 'center', columntype: 'number', align: 'center',
                    cellsrenderer: function (row, column, value) {
                        return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:1.9;'>" + (value + 1) + "</div>";
                    }
                },
                { text: '타입', width: "10%", datafield: 'DocType', align: 'center', cellsalign: 'center', },
                { text: '결재 제목', width: "45%", datafield: 'Description', align: 'center', cellsalign: 'left', },
                { text: '작성자', width: "10%", datafield: 'DocCreateNm', align: 'center', cellsalign: 'center', },
                { text: '문서명', width: "20%", datafield: 'DocNm', align: 'center', cellsalign: 'center', cellsformat: 'yyyy-MM-dd HH:mm:ss' },
                { text: '상태', width: "10%", datafield: 'DocBpolicyNm', align: 'center', cellsalign: 'center' }
            ]
        });


        //공지사항
        var selNoticeOID = null;
        var selNoticeRowKey = null;
        var NoticeSource =
        {
            dataType: "json",
            dataFields: [
                { name: 'OID', type: 'number' },
                { name: 'Name', type: 'string' },
                { name: 'Description', type: 'string' },
                { name: 'CreateDt', type: 'date' },
                { name: 'CreateUs', type: 'number' },
                { name: 'CreateUsNm', type: 'string' },
                { name: 'BPolicy', type: 'date' },
                { name: 'BPolicyAuths', type: 'Array' },
            ],
        };

        var grdNotice$ = $("#grdNotice");
        grdNotice$.jqxGrid({
            width: "100%",
            height: 245,
            rowsheight: 28,
            columnsheight: 30,
            //source:,
            sortable: false,
            pageable: false,
            showtoolbar: false,
            columns: [
                {
                    text: 'NO', width: "5%", cellsalign: 'center', columntype: 'number', align: 'center',
                    cellsrenderer: function (row, column, value) {
                        return "<div style='width:100%;height:100%;text-align:center;vertical-align:middle;line-height:1.9;'>" + (value + 1) + "</div>";
                    }
                },
                { text: '제목', datafield: 'Name', width: "70%", align: 'center', cellsalign: 'left', },
                { text: '작성자', datafield: 'CreateUsNm', width: "8%", align: 'center', cellsalign: 'center', },
                { text: '작성일', datafield: 'CreateDt', width: "17%", align: 'center', cellsalign: 'center', cellsformat: 'yyyy-MM-dd' },
            ]
        });
        grdNotice$.on('rowselect', function (event) {
            var args = event.args;
            var rowData = args.row;
            selNoticeRowKey = rowData.uid;
            selNoticeOID = rowData.OID;
        });
        grdNotice$.on('rowdoubleclick', function (event) {
            const args = event.args;
            const row = args.row.bounddata;
            if (gClickDuplication) { return; }
            gClickDuplication = true;
            setTimeout(function () {
                OpenNoticeDialog(function (res) {
                    getNoticeList(NoticeSource, grdNotice$, null);
                }, null, {OID : row.OID}, '/Common/EditNotice', '공지사항 상세');
                gClickDuplication = false;
            }, 250);
        });

        $('#btnAddNotice').on('click', function () {
            OpenNoticeDialog(function () {
                getNoticeList(NoticeSource, grdNotice$, null);
            }, null,null, '/Common/EditNotice', '공지사항 등록');
        });

        $('#btnDelNotice').on('click', function () {
            if (selNoticeOID == null || selNoticeOID == "") {
                alert('공지사항을 선택하여주세요.');
                return;
            }
            var data = grdNotice$.jqxGrid('getrowdata', selNoticeRowKey);
            if (data.BPolicyAuths != null) {
                var chkAuths = data.BPolicyAuths.findIndex(function (item) {
                    return item.AuthNm == '@Common.Constant.CommonConstant.AUTH_DELETE';
                });
                if (chkAuths > -1) {
                    if (confirm('삭제 하시겠습니까?')) {
                        RequestData('/Common/DelNotice', { OID: selNoticeOID }, function (res) {
                            if (res.isError) {
                                alert(res.resultMessage);
                                return;
                            }
                            alert("삭제 되었습니다.");
                            getNoticeList(NoticeSource, grdNotice$, null);
                        });
                    }
                } else {
                    alert('권한이 없습니다.');
                }
            }
        });

        dashboardTmpParam = {
            'Noti': {
                'Source': NoticeSource,
                'Grid': grdNotice$
            },
            'Approv': {
                'Target': $('#tabApproval'),
                'Source': myApprovalSource,
                'Grid': ($('#tabApproval').jqxTabs('selectedItem') == 0 ? $("#grdApprovalDemandList") : ($('#tabApproval').jqxTabs('selectedItem') == 1 ? $("#grdApprovalFinishList") : $("#grdApprovalRejectList")))
            }
        }

        dashboardTmpFunction(dashboardTmpParam);

        $('#tabApproval').on('selected', function (event) {
            var clickedItem = event.args.item;
            dashboardTmpParam['Approv'].Grid = (clickedItem == 0 ? $("#grdApprovalDemandList") : (clickedItem == 1 ? $("#grdApprovalFinishList") : $("#grdApprovalRejectList")))
            getApprovalList(dashboardTmpParam.Approv.Source, dashboardTmpParam.Approv.Target, dashboardTmpParam.Approv.Grid);
        });
    });

    dashboardTmpFunction = function (param) {
        console.log(param);
        var loading$ = $('#loading');
        loading$.css('display', 'block');
        setTimeout(function () {
            getPersonTaskList();
            getNoticeList(param.Noti.Source, param.Noti.Grid, null);
            getApprovalTaskLIst();
            getApprovalList(param.Approv.Source, param.Approv.Target, param.Approv.Grid);
        }, 10);
        loading$.css('display', 'none');
    }

    function getNoticeList(_Source, _Grid$, _Param) {
        RequestData("/Common/SelNotice", _Param, function (res) {
            PrintJqxGrid(_Source, _Grid$, res);
        });
    }

    function getPersonTaskList() {
        RequestData("/Pms/DashboardPersonTask", {}, function (res) {
            $('#spStarted').text(res.started);
            $('#spComplete').text(res.complete);
            $('#spPrepare').text(res.prepare);
            $('#spDelay').text(res.deplay);
        });
    }

    function getApprovalTaskLIst() {
        RequestData("/Common/ApprvalDashboard", {}, function (res) {
            $('#spStartedApprov').text(res.started);
            $('#spWeekCompleteApprov').text(res.weekComplete);
            $('#spPrepareApprov').text(res.prepare);
            $('#spRejectApprov').text(res.reject);
        });
    }

    function getApprovalList(_Source, _Target$, _Grid$) {
        var param = {};
        if (_Target$.jqxTabs('selectedItem') == 0) {
            param.BPolicyNm = '@Common.Constant.CommonConstant.POLICY_APPROVAL_STARTED';
        } else if (_Target$.jqxTabs('selectedItem') == 1) {
            param.BPolicyNm = '@Common.Constant.CommonConstant.POLICY_APPROVAL_COMPLETED';
        } else if (_Target$.jqxTabs('selectedItem') == 2) {
            param.BPolicyNm = '@Common.Constant.CommonConstant.POLICY_APPROVAL_REJECTED';
        }
        console.log(_Target$.jqxTabs('selectedItem'));
        RequestData("/Common/ApprvalListDashboard", param, function (res) {
            console.log(res);
            PrintJqxGrid(_Source, _Grid$, res);
        });
    }


</script>