@{
    Layout = null;
}
<div class="searchBox">
    <div class="searchTitle">
        <label><i class="fas fa-folder-open"></i> &nbsp;라이브러리 관리</label>
    </div>
    <div class="searchContent">
        <div class="searchData">
            <div>코드</div>
            <div>
                <input type="text" class="txtBox" id="LibraryManage_Name" />
                @* <div id="LibraryManage_Name" style="margin-left:5px;"></div>*@
            </div>
        </div>
        <div class="searchData">
            <div>이름</div>
            <div>
                <input type="text" class="txtBox" id="LibraryManage_KorNm" />
            </div>
        </div>
        <div class="searchButton">
            <button id="LibraryManage_SearchBtn" class="searchBtn custom-button" onclick=""><i class="fas fa-search"></i> 검색</button>
        </div>
    </div>
</div>
<div id="LibraryManage_Grid"></div>


<script>
    var selRow = {};
    var LibSearchBtn$ = $('#LibraryManage_SearchBtn');
    $(function () {
        var rowKey = null;

        var Librarysource =
        {
            dataType: "json",
            dataFields: [
                { name: 'OID', type: 'number' },
                { name: 'FromOID', type: 'number' },
                { name: 'Name', type: 'string' },
                { name: 'KorNm', type: 'string' },
                { name: 'Ord', type: 'number' },
                { name: 'Description', type: 'string' },
                { name: 'IsUse', type: 'string' },
                { name: 'CreateDt', type: 'date' },
                { name: 'CreateUsNm', type: 'string' },
                { name: 'isRequired', type: 'string' },
            ],
            hierarchy:
            {
                keyDataField: { name: 'OID' },
                parentDataField: { name: 'FromOID' }
            },
            id: 'OID',
            addRow: function (rowID, rowData, IsUse, parentID, commit) {
                // synchronize with the server - send insert command
                // call commit with parameter true if the synchronization with the server is successful
                // and with parameter false if the synchronization failed.
                // you can pass additional argument to the commit callback which represents the new ID if it is generated from a DB.
                commit(true);
                newRowID = rowID;
            },
            updateRow: function (rowID, rowData, commit) {
                // synchronize with the server - send update command
                // call commit with parameter true if the synchronization with the server is successful
                // and with parameter false if the synchronization failed.
                commit(true);
            },
        };
        var initialized = false;
        const LibraryGrd$ = $('#LibraryManage_Grid');
        LibraryGrd$.jqxTreeGrid(
            {
                width: "100%",
                height: 675,
                theme: "kdnc",
                //      source: dataAdapter,
                sortable: true,
                ready: function () {
                    initialized = true;

                },
                columns: [
                    { text: 'OID', datafield: 'OID', type: 'number', align: 'center', hidden: true },
                    {
                        text: '코드', datafield: 'Name', type: 'string', align: 'center',
                        cellsRenderer: function (row, dataField, cellValue, rowData, cellText) {
                            if (rowData.isRequired == "Y") {
                                return cellValue + ' <i class="fas fa-lock"></i>';

                            } else {
                                return cellValue;


                            }
                        }
                    },
                    { text: '이름', datafield: 'KorNm', type: 'string', align: 'center', },
                    { text: '순서', datafield: 'Ord', type: 'string', align: 'center', },
                    { text: '설명', datafield: 'Description', type: 'string', align: 'center', },
                    { text: '사용여부', datafield: 'IsUse', type: 'string', align: 'center', },

                    // { text: '생성일', datafield: 'CreateDt', type: 'date', align: 'center', },
                    // { text: '생성자', datafield: 'CreateUsNm', type: 'string', align: 'center', },
                ],
                editable: false,
                showToolbar: true,
                toolbarHeight: 45,
                renderToolbar: function (statusbar) {
                    if (initialized === false) {
                        var container$ = $('<div class="lGridComponent"></div>');
                        var libAddBtn$ = $('<button class="custom-button"><i class="fas fa-plus-square"></i> 추가</button>').jqxButton();
                        var libDellBtn$= $('<button class="custom-button"><i class="fas fa-trash-alt"></i> 삭제</button>').jqxButton();
                        container$.append(libAddBtn$);
                        container$.append(libDellBtn$);
                        statusbar.append(container$);
                        //행 추가
                        libAddBtn$.on('click', function (e) {
                            var datarow = {};
                            if (selRow == null || selRow == undefined ||selRow.OID ==null) {
                                OpenLibraryManipDialog(function (res) {
                                    getLibraryList(Librarysource, LibraryGrd$,null,res);

                                }, null, null, '/Manage/dlgLibraryManip', '라이브러리 관리', "Create");
                            } else {
                                OpenLibraryManipDialog(function (res) {
                                    getLibraryList(Librarysource, LibraryGrd$,null,res);

                                }, null, selRow.OID, '/Manage/dlgLibraryManip', '라이브러리 관리', "Create");
                            }

                        });

                        libDellBtn$.on('click', function (e) {
                            var param = {};
                            param.OID = selRow.OID;
                            if (selRow != null && selRow != '') {
                                if (selRow.isRequired == "Y") {
                                    alert('필수항목이라 삭제할수 없습니다.');
                                } else {
                                    if (confirm('삭제 하시겠습니까?')) {
                                        $.post('/Manage/delLibrary',param, function (res) {
                                            if (res.isError) {
                                                alert(response.resultMessage);
                                                return;
                                            }
                                            alert('삭제 하였습니다.');
                                            getLibraryList(Librarysource, LibraryGrd$);
                                        });
                                    }
                                }
                            } else {
                                alert('삭제할 항목을 선택하여 주세요.');
                            }

                        });
                    }
                }


            });


        LibraryGrd$.on('rowClick', function (event) {
            var arg = event.args;
            var rowData = arg.row;
            if (selRow == rowData) {
                setTimeout(function () {
                    LibraryGrd$.jqxTreeGrid('clearSelection');
                }, 5);
               // LibraryGrd$.jqxTreeGrid('collapseRow', selRow.OID);
                selRow = null;
            } else {
                selRow = rowData;
               // LibraryGrd$.jqxTreeGrid('expandRow', selRow.OID);
            }
            // const parentData = LibraryGrd$.jqxTreeGrid('getRow', ProjectOID);
        });

        LibraryGrd$.on('rowDoubleClick', function (event) {
            var arg = event.args;
            selRow = arg.row;
            OpenLibraryManipDialog(function (res) {
                LibraryGrd$.jqxTreeGrid('updateRow', res.OID, res);
               // LibraryGrd$.jqxTreeGrid('render');
            }, null, selRow.OID, '/Manage/dlgLibraryManip', '라이브러리 관리', "Edit");
        });

        getLibraryList(Librarysource, LibraryGrd$,null,null);

        LibSearchBtn$.on('click', function () {
            var param = {};
            param.Name = $('#LibraryManage_Name').val();
            param.KorNm = $('#LibraryManage_KorNm').val();
            getLibraryList(Librarysource, LibraryGrd$, param,null);
        });
    });

    function getLibraryList(_Source, _Grid$,_param,_key) {
        RequestData("/Manage/SelLibrary", _param, function (res) {
            PrintJqxTreeGrid(_Source, _Grid$, res);
            callBackListSelect(_Grid$, _key);
        });
        
    }
    function callBackListSelect(_Grid$, _key) {
        selRow.OID = _key;
        _Grid$.jqxTreeGrid('selectRow', _key);
    }



</script>

